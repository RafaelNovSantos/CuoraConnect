@page "/"
@using System.ComponentModel.DataAnnotations;
@using System.Diagnostics
@using System.Net.Http.Headers;
@using System.IO;
@using System.Net.Http;
@using System.Threading.Tasks;
@using System.Xml.Linq;

<h3>Configuração de Rede Wi-Fi</h3>

<EditForm Model="@wifiConfig" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator />
    

    <div class="form-group">
        <label for="ssid">SSID (Nome da Rede)</label>
        <InputText id="ssid" class="form-control" @bind-Value="wifiConfig.SSID" />
        <ValidationMessage For="@(() => wifiConfig.SSID)" />
    </div>

    <div class="form-group">
        <label for="password">Senha</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="wifiConfig.Password" />
        <ValidationMessage For="@(() => wifiConfig.Password)" />
    </div>

    <div class="form-group">
        <label for="encryption">Tipo de Criptografia</label>
        <InputSelect id="encryption" class="form-control" @bind-Value="wifiConfig.Encryption">
            <option value="WPA2" selected>WPA2</option>
            <option value="WPA3">WPA3</option>
            <option value="WEP">WEP</option>
            <option value="None">Nenhuma</option>
        </InputSelect>
        <ValidationMessage For="@(() => wifiConfig.Encryption)" />
    </div>

    <div class="form-group">
        <label for="ip">Endereço IP</label>
        <InputText id="ip" class="form-control" @bind-Value="wifiConfig.IpAddress" />
        <ValidationMessage For="@(() => wifiConfig.IpAddress)" />
    </div>

    <div class="form-group">
        <label for="gateway">Gateway Padrão</label>
        <InputText id="gateway" class="form-control" @bind-Value="wifiConfig.Gateway" />
        <ValidationMessage For="@(() => wifiConfig.Gateway)" />
    </div>

    <div class="form-group">
        <label for="primaryDns">DNS Primário</label>
        <InputText id="primaryDns" class="form-control" @bind-Value="wifiConfig.PrimaryDns" />
        <ValidationMessage For="@(() => wifiConfig.PrimaryDns)" />
    </div>

    <div class="form-group">
        <label for="secondaryDns">DNS Secundário</label>
        <InputText id="secondaryDns" class="form-control" @bind-Value="wifiConfig.SecondaryDns" />
        <ValidationMessage For="@(() => wifiConfig.SecondaryDns)" />
    </div>

    <button type="submit" style="margin-top:10px;" class="btn btn-primary">Salvar Configurações</button>
</EditForm>

@code {
    private WifiConfigModel wifiConfig = new WifiConfigModel();

    private async void SubmitForm()
    {
        string url = "http://192.168.0.1/export/config";
        string username = "admin";
        string password = "admin";
        string filePath = "C:\\Users\\Systel\\Downloads\\Suporte Max e Qendra\\Scripts configuracion WiFi MAX- V3 para Rev E13\\Config extraido\\config_export.txt";

        var handler = new HttpClientHandler
            {
                Credentials = new System.Net.NetworkCredential(username, password)
            };

        using (var client = new HttpClient(handler))
        {
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            HttpResponseMessage response = await client.PostAsync(url, null);

            if (response.IsSuccessStatusCode)
            {
                string responseData = await response.Content.ReadAsStringAsync();

                // Salva a resposta em um arquivo de texto
                await File.WriteAllTextAsync(filePath, responseData);

                Debug.WriteLine($"Config exportado e salvo no arquivo: {filePath}");

                // Lê o arquivo e extrai o valor do campo <value>
                string ssidValue = ExtractValueFromXml(filePath, "SSID");
                Debug.WriteLine($"SSID extraído: {ssidValue}");
            }
            else
            {
                Debug.WriteLine($"Erro: {response.StatusCode}");
            }
        }
    }

    private string ExtractValueFromXml(string filePath, string itemName)
    {
        try
        {
            XDocument doc = XDocument.Load(filePath);
            var valueElement = doc.Descendants("configitem")
                .FirstOrDefault(x => (string)x.Attribute("name") == itemName)
                ?.Element("value");

            return valueElement != null ? valueElement.Value : string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao ler o arquivo XML: {ex.Message}");
            return string.Empty;
        }
    }

    public class WifiConfigModel
    {
        [Required(ErrorMessage = "O SSID é obrigatório")]
        public string SSID { get; set; }

        [Required(ErrorMessage = "A senha é obrigatória")]
        public string Password { get; set; }

        public string Encryption { get; set; }

        [Required(ErrorMessage = "O endereço IP é obrigatório")]
        [RegularExpression(@"^(\d{1,3}\.){3}\d{1,3}$", ErrorMessage = "Endereço IP inválido")]
        public string IpAddress { get; set; }

        [Required(ErrorMessage = "O gateway é obrigatório")]
        [RegularExpression(@"^(\d{1,3}\.){3}\d{1,3}$", ErrorMessage = "Gateway inválido")]
        public string Gateway { get; set; }

        [Required(ErrorMessage = "O DNS primário é obrigatório")]
        [RegularExpression(@"^(\d{1,3}\.){3}\d{1,3}$", ErrorMessage = "DNS primário inválido")]
        public string PrimaryDns { get; set; }

        [Required(ErrorMessage = "O DNS secundário é obrigatório")]
        [RegularExpression(@"^(\d{1,3}\.){3}\d{1,3}$", ErrorMessage = "DNS secundário inválido")]
        public string SecondaryDns { get; set; }
    }
}
