@page "/"
@using System.Reflection
@using System.IO
@using System.Diagnostics
@using System.Net
@using System.Security.Cryptography
@using System.Text
@using System.Text.RegularExpressions
@using CuoraConnect.Services
@using CuoraConnect.Components.Layout
@using Microsoft.AspNetCore.Components
@inject IFileUploadService FileUploadService



<body class="d-flex justify-content-center flex-column align-items-center vh-100">
    <main class="d-flex flex-column justify-content-center align-items-center flex-grow-1">
        <div class="col-lg-12 text-center">
            <h1 class=" fw-bold mb-3 text-primary">
                Configuração da rede Wi-Fi Balança Cuora Max
            </h1>
        </div>
        <section class="text-secondary w-100 d-flex justify-content-center align-items-center">
            <div class="row content px-2" style="width: 100%;">
                <!-- Primeiro Passo -->
                <div class="col-sm-12 col-xl-12 pb-3 pt-3">
                    <div class="bg-light d-block pb-5 ps-4 pe-4 pt-5 shadow" style="text-align: center;">
                        <section class="d-flex align-items-center position-relative">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="2.5em" height="2.5em" class="text-primary">
                                <g>
                                    <path fill="none" d="M0 0h24v24H0z" />
                                    <polyline fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="2" points="20 8.5 20 22.5 4 22.5 4 8.5" />
                                    <polyline fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="2" points="23 10.5 12 1.5 1 10.5" />
                                    <circle cx="12" cy="18.5" r="1" fill="currentColor" />
                                    <path fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="2" d="M9.17,15.67a4,4,0,0,1,5.66,0" />
                                    <path fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="2" d="M7.05,13.55a7,7,0,0,1,9.9,0" />
                                </g>
                            </svg>
                            <h1 class="text-primary text-center w-100">
                                3° Terceiro Passo
                            </h1>
                        </section>
                        <h4 class="fw-bold text-dark text-center w-100">
                            Conecte no Wi-Fi do seu comércio
                        </h4>
                        <p>Após conectar no seu Wi-Fi clique no botão abaixo para pegar as informações da sua rede.</p>
                        <a href="sendfile" class="btn btn-primary">Prosseguir</a>
                        @if (statusMessage != null)
                        {
                            <p class="mt-3">@statusMessage</p>
                        }
                    </div>
                </div>
            </div>
        </section>
    </main>

    <script>
        // Detectar o sistema operacional e adicionar a classe correspondente ao body
        document.addEventListener('DOMContentLoaded', function () {
            var userAgent = navigator.userAgent.toLowerCase();



@code {
    private static readonly HttpClient client = new HttpClient();
    private string? statusMessage;

    private async Task EnviarConfig()
    {
        Debug.WriteLine("Iniciando envio de configuração...");

        FileUploadService.SaveXmlToFile();

        // Função para calcular o hash MD5 de uma string
        string Md5Hash(string data)
        {
            Debug.WriteLine($"Calculando hash MD5 para: {data}");
            using var md5 = MD5.Create();
            byte[] hashBytes = md5.ComputeHash(Encoding.UTF8.GetBytes(data));
            StringBuilder sb = new StringBuilder();
            foreach (byte b in hashBytes)
            {
                sb.Append(b.ToString("x2"));
            }
            Debug.WriteLine($"Hash MD5 calculado: {sb}");
            return sb.ToString();
        }

        // Função para extrair valores dos parâmetros do cabeçalho WWW-Authenticate
        Dictionary<string, string> ExtractDigestParts(string header)
        {
            Debug.WriteLine($"Extraindo partes do cabeçalho WWW-Authenticate: {header}");
            var values = new Dictionary<string, string>();
            var pattern = new Regex(@"(\w+)=[\""']?([^\"",]+)[\""']?");
            var matches = pattern.Matches(header);




@code {
 
    private string? statusMessage;

  
}