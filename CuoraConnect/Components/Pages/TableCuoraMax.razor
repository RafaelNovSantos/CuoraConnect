@page "/"
@using MudBlazor
@using CuoraConnect.Models.ExportInfo;
@using CuoraConnect.Services
@using System.Text.RegularExpressions

@using SQLite
@inject IFileUploadService FileUploadService



<MudDataGrid T="ExportInfo" Items="@(ExportInfos?.Take(4) ?? Enumerable.Empty<ExportInfo>())" ReadOnly="@_readOnly" 
             EditMode="DataGridEditMode.Cell"
             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" 
             CommittedItemChanges="@CommittedItemChanges"
             Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)"
             Class="tableEdit" Style="">
    <Columns>
        <PropertyColumn T="ExportInfo" TProperty="string" Property="x => x.Id" Title="Nome do equipamento" Editable="false" />
        <PropertyColumn T="ExportInfo" TProperty="Image"  ReadOnly="true" Editable="false">
            <CellTemplate>
                <img src="/Images/producto-cuora-max-05.jpg" class="product-image" />
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn T="ExportInfo" Validation="@ValidateIPAddress" TProperty="string" Property="x => x.IP_Address" Editable="true" Title="IP configurado no equipamento">
            <EditTemplate>
        
               
                        <MudTextField Validation="@ValidateIPAddress" OnBlur="@((args) => SaveIP(context.Item))" @bind-Value="@context.Item.IP_Address" />
                 
            </EditTemplate>
        </PropertyColumn>
      
        <PropertyColumn T="ExportInfo" Validation="@ValidateIPAddress" TProperty="string" Property="x => x.Default_Gateway" Editable="true" Title="IP do Roteador">
            <EditTemplate>
               
                    <MudTextField @bind-Value="@context.Item.Default_Gateway" 
                                  
                                  Validation="@ValidateIPAddress" />
               
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn T="ExportInfo"   TProperty="string" Property="x => x.Network_Name" Editable="true" Title="Nome da rede conectada">
            <EditTemplate>


                <MudTextField AdornmentIcon="@Icons.Material.Filled.Router" @bind-Value="@context.Item.Network_Name" For="@(() => context.Item.Network_Name)"
                                  Immediate="true"
                                  OnBlur="@((args) => SaveIP(context.Item))"
                                   />
                                   
                
            </EditTemplate>
        </PropertyColumn>

        <TemplateColumn>
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" 
                               OnClick="@context.Actions.StartEditingItemAsync" 
                               Color="Color.Secondary" 
                               Class="action-btn" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


<MudIconButton Icon="@Icons.Material.Filled.Build" Color="Color.Primary" OnClick="createDataBaseTest"  />

           


<style>
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f7f9fc;
        margin: 0;
    }

    h1 {
        color: #333;
        font-size: 24px;
        text-align: center;
        margin-bottom: 30px;
    }

    .tableEdit{
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        text-align: center;
        margin: 20px;
        background-color: #fff;
        border-radius: 15px;
        overflow: hidden;
    }

    .product-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }

    .product-image:hover {
        transform: scale(1.05);
    }

    .action-btn {
        cursor: pointer;
        font-size: 18px;
        border-radius: 50%;
        transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .action-btn:hover {
        transform: scale(1.15);
    }

    th {
        background-color: #4e73df;
        color: #fff;
        text-align: center !important;
        font-weight: 600;
    }



    td {
        color: #555;
        text-align: center !important;
        font-weight: 500;
        vertical-align: middle;
        padding: 16px 24px;
        transition: background-color 0.3s ease;
    }

    tbody tr:nth-child(odd) {
        background-color: #fff;
    }

    tbody tr:nth-child(even) {
        background-color: #f7f9fc;
    }

    tr:hover {
        background-color: #f8f9fc;
    }

input {
  border: 2px solid transparent !important;
  width: 15em !important;
  height: 2em !important;
  outline: none !important;
  overflow: hidden !important;
  background-color: #F3F3F3 !important;
  border-radius: 10px !important;
  transition: all 0.5s !important;
  text-align: center !important;
}

input:hover,
input:focus{
  border: 2px solid #4A9DEC !important;
  box-shadow: 0px 0px 0px 7px rgb(74, 157, 236, 20%) !important;
            background-color: white !important;
}



  
    .mud-input-control > .mud-input-control-input-container {
        display: unset !important;
        
    }

    .mud-input-control {
        flex: none !important;
    }
  </style>




@code {

    public IMask ipv4Mask = RegexMask.IPv4();
    private List<ExportInfo> ExportInfos = new List<ExportInfo>(); // Inicialização

    private bool activeSave;

    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    private MudForm form;

    private ExportInfo originalItem;

    protected override void OnInitialized()
    {
        string dbPath = FileUploadService.pathDB();

        using var db = new SQLiteConnection(dbPath);
        db.CreateTable<ExportInfo>();
        connectionBD(); // Presumindo que isso carrega os dados na interface
    }


    private async Task createDataBaseTest()
    {
        using var db = new SQLiteConnection(FileUploadService.pathDB());
        // Busca todos os dados da tabela ExportInfo
        // Crie um novo objeto ExportInfo
        var novoRegistro = new ExportInfo
            {
                // Aqui você define os valores das colunas da tabela
                Id = "Cuora_MAX",
                IP_Address = "1.1.1.1", 
                Default_Gateway = "192.142.1.1",
                Network_Name = "Teste Wifi"
                // Outros campos conforme necessário
            };

        // Insere o novo registro na tabela ExportInfo
        db.Insert(novoRegistro);

        // Opcionalmente, você pode buscar todos os registros novamente para confirmar
        var netConfigs = db.Table<ExportInfo>().ToList();
       
    }
    // Método de validação do IP
    private string ValidateIPAddress(string ipAddress)
    {

        var ipPattern = @"^([0-9]{1,3}\.){3}[0-9]{1,3}$";
        activeSave = false;
        // Verifica se o IP está vazio
        if (string.IsNullOrWhiteSpace(ipAddress))
            
            return "IP Precisa ser preenchido.";

        // Verifica se o IP está no formato correto
        if (!Regex.IsMatch(ipAddress, ipPattern))
            
            return "IP no formato errado, exemplo (192.168.1.1)";

        activeSave = true;
        return null; // Retorna "OK" se não houver erro
    }



    private void SaveIP(ExportInfo item)
    {


        if (activeSave == true)
        {
            using var db = new SQLiteConnection(FileUploadService.pathDB());

            // Atualiza o registro no banco de dados
            db.Update(item);

            // Opcional: Recarregar os dados para garantir que a interface esteja atualizada
            connectionBD();
        }
        else
        {
            return;
        }
    }


    public string connectionBD() // construtor
    {

        using var db = new SQLiteConnection(FileUploadService.pathDB());
        // Busca todos os dados da tabela ExportInfo
        var netConfigs = db.Table<ExportInfo>().ToList(); // Coleta todos os registros

        ExportInfos = new List<ExportInfo>(); // Inicializa a lista

        // Preenche a lista ExportInfos com os dados do banco

        

        foreach (var netConfig in netConfigs)
        {
            var IP = netConfig.IP_Address;

            // Verifica se a string contém a barra "/"
            if (IP.Contains("/"))
            {
                // Pega a parte antes da barra "/"
                IP = IP.Substring(0, IP.IndexOf("/"));
            }

            ExportInfos.Add(new ExportInfo
                {
                    Id = netConfig.Id,
                    IP_Address = IP,
                    Default_Gateway = netConfig.Default_Gateway,
                    Network_Name = netConfig.Network_Name
                });
        }
        return "";
    }


    // events
    void StartedEditingItem(ExportInfo item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(ExportInfo item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(ExportInfo item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
}
