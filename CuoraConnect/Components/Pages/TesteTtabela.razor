@page "/fdsfds"
@using MudBlazor
@using CuoraConnect.Models.ExportInfo
@using CuoraConnect.Services
@inject IExportInfoService exportinfoService
@inject IDialogService DialogService

<MudDialogProvider />
<MudSnackbarProvider />
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5" Color="Color.Primary">Incluir e Editar ExportInfos</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="exportinfo.Id" Label="Id" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
        <MudTextField @bind-Value="exportinfo.IP_Address" Label="IP_Address" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudNumericField @bind-Value="exportinfo.Default_Gateway" Label="Default_Gateway" Variant="Variant.Filled" Margin="Margin.Normal"></MudNumericField>
        <br />
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="Salvar">Salvar ExportInfo</MudButton>
    </MudCardContent>
</MudCard>

<br />

<MudTable Elevation="25" Striped="true" Items="exportinfos" Filter="new Func<ExportInfo, bool>(Procurar)">
    <ToolBarContent>
        <MudText Typo="Typo.h5">ExportInfos</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="criterio"
                      Placeholder="Procurar exportinfos..."
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>IP_Address</MudTh>
        <MudTh>Default_Gateway</MudTh>
        <MudTh>Operação</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="IP_Address">@context.IP_Address</MudTd>
        <MudTd DataLabel="Default_Gateway">@context.Default_Gateway</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(e => Editar(@context.Id))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudButton @onclick="@(e => ConfirmaExclusao(@context))" Variant="Variant.Filled" Color="Color.Primary">
                Open Simple Dialog
            </MudButton>
            <MudFab @onclick="@(e => ConfirmaExclusao(@context))" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private string criterio = "";
    private ExportInfo exportinfo = new ExportInfo();
    private IEnumerable<ExportInfo> exportinfos = new List<ExportInfo>();

    [Inject]
    private ISnackbar snackBar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetExportInfos();
    }

    private async Task<IEnumerable<ExportInfo>> GetExportInfos()
    {
        exportinfos = await exportinfoService.GetExportInfos();
        return exportinfos;
    }

    private bool Procurar(ExportInfo exportinfo)
    {
        if (string.IsNullOrWhiteSpace(criterio)) return true;

        return exportinfo.Id.ToString().Contains(criterio, StringComparison.OrdinalIgnoreCase)
            || exportinfo.IP_Address.Contains(criterio, StringComparison.OrdinalIgnoreCase);
    }

    private async Task Salvar()
    {
        exportinfo.Id = await exportinfoService.SalvarExportInfo(exportinfo);
        exportinfo = new ExportInfo();
        await GetExportInfos();
    }

    private void Editar(string id)
    {
        exportinfo = exportinfos.FirstOrDefault(c => c.Id == id)!;
    }

    private async Task ConfirmaExclusao(ExportInfo exportInfo)
    {
        var parameters = new DialogParameters
    {
        { "Server", exportInfo } // Usando a string "Server" diretamente
    };

        var dialog = await DialogService.ShowAsync<ConfirmDeleteDialog>("Confirmar Exclusão", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await exportinfoService.DeletarExportInfo(exportInfo.Id);
            snackBar.Add("ExportInfo excluído com sucesso.", Severity.Warning);
            await GetExportInfos(); // Recarregar os dados após exclusão
         
            StateHasChanged();
        }
    }

}
