@page "/importconfig"
@using System.Reflection
@using System.IO
@using System.Diagnostics
@using System.Net
@using System.Security.Cryptography
@using System.Text
@using System.Text.RegularExpressions
@using CuoraConnect.Services
@using Microsoft.AspNetCore.Components
@using SQLite
@using CuoraConnect.Models.ExportInfo;
@using System.Net.Sockets
@using System.Xml.Linq;
@inject IFileUploadService FileUploadService
@inject INetworkService NetworkService
@inject IJSRuntime JSRuntime


<script>

    function scrollToElement() {
        // Rola até o final da página
        window.scrollTo({
            top: document.body.scrollHeight, // Altura total do corpo da página
            behavior: 'smooth' // Rolagem suave
        });
    }

</script>

<ol >
    <li id="pop-up" style="display: grid; align-items: center; justify-items: center; ">
        <h3>Conecte no Wi-Fi da balança para importar as configurações</h3>
        <p>Logo após conectar no Wi-Fi clique no botão abaixo para importar a configuração da balança.</p>



        <span >
            <img class="product-image-card" src="/Images/cuora_max.svg" alt="Cuora Max"  />
        </span>

  
        <a @onclick="ImportarConfig" class=" button">


            <svg height="30px" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M17 17H17.01M17.4 14H18C18.9319 14 19.3978 14 19.7654 14.1522C20.2554 14.3552 20.6448 14.7446 20.8478 15.2346C21 15.6022 21 16.0681 21 17C21 17.9319 21 18.3978 20.8478 18.7654C20.6448 19.2554 20.2554 19.6448 19.7654 19.8478C19.3978 20 18.9319 20 18 20H6C5.06812 20 4.60218 20 4.23463 19.8478C3.74458 19.6448 3.35523 19.2554 3.15224 18.7654C3 18.3978 3 17.9319 3 17C3 16.0681 3 15.6022 3.15224 15.2346C3.35523 14.7446 3.74458 14.3552 4.23463 14.1522C4.60218 14 5.06812 14 6 14H6.6M12 15V4M12 15L9 12M12 15L15 12" stroke="#fff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            </svg>


            <div class="textButton">
                Importar configuração
            </div>

        </a>
      

   
        @if (statusMessage != null)
        {
            <p class="mt-3">@statusMessage</p>
        }
    </li>
</ol>

@if (!string.IsNullOrEmpty(statusAlert) || !string.IsNullOrEmpty(statusSuccess) || !string.IsNullOrEmpty(statusInfo) || statusError != null || loader == true)
{
<div class="container ">
    <div class="text-center">
        <h4 class="fw-bold">Status de conexão </h4>
    </div>

        @if (statusSuccess != null)
        {
            loader
    = false;
    <!-- Success Alert -->
    <div class="alert alert-success d-flex justify-content-between align-items-center" role="alert">
        <div class="d-flex align-items-center">
            <svg width="30px" height="30px" viewBox="0 0 48 48" version="1" xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 48 48">
                <circle fill="#0f5132" cx="24" cy="24" r="21" />
                <polygon fill="#d1e7dd" points="34.6,14.6 21,28.2 15.4,22.6 12.6,25.4 21,33.8 37.4,17.4" />
            </svg>
            <div class="mx-3">Sucesso - @statusSuccess</div>
        </div>
    </div>
    }

        @if (statusInfo != null)
        {
            loader
    = false;
               <!-- Info Alert -->
    <div class="alert alert-info d-flex justify-content-between align-items-center" role="alert">
        <div class="d-flex align-items-center">

            <svg width="30px" height="30px" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" version="1.1" fill="#CFF4FC" stroke="#055160" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5">
                <circle cy="8" cx="8" r="6.25" />
                <path d="m8 5.25v0m0 6v-3.5" />
            </svg>

            <div class="mx-3">Informação - @statusInfo</div>
        </div>
            <a class="btn btn-outline-info btn-sm" @onclick="@(() => aHide("statusInfoHide"))">Feito</a>
    </div>
    }


      @if (statusAlert != null)
        {
            loader
        = false;
    <!-- Warning Alert -->
    <div class="alert alert-warning d-flex justify-content-between align-items-center" role="alert">
        <div class="d-flex align-items-center">
            <svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="25" height="25" viewBox="0 0 310.806 310.806" style="enable-background:new 0 0 310.806 310.806;" xml:space="preserve">
<path d="M305.095,229.104L186.055,42.579c-6.713-10.52-18.172-16.801-30.652-16.801c-12.481,0-23.94,6.281-30.651,16.801
	L5.711,229.103c-7.145,11.197-7.619,25.39-1.233,37.042c6.386,11.647,18.604,18.883,31.886,18.883h238.079
	c13.282,0,25.5-7.235,31.888-18.886C312.714,254.493,312.24,240.301,305.095,229.104z M155.403,253.631
	c-10.947,0-19.82-8.874-19.82-19.82c0-10.947,8.874-19.821,19.82-19.821c10.947,0,19.82,8.874,19.82,19.821
	C175.223,244.757,166.349,253.631,155.403,253.631z M182.875,115.9l-9.762,65.727c-1.437,9.675-10.445,16.353-20.119,14.916
	c-7.816-1.161-13.676-7.289-14.881-14.692l-10.601-65.597c-2.468-15.273,7.912-29.655,23.185-32.123
	c15.273-2.468,29.655,7.912,32.123,23.185C183.284,110.192,183.268,113.161,182.875,115.9z" fill="#664d03"></path>
</svg>
                <div class="mx-3">Atênção - @statusAlert</div>
        </div>
            <a href="Wi-FiConfig"  class="btn btn-outline-warning btn-sm" @onclick="@(() => SetActiveMenu("Wi-FiConfig"))">Configurar Wi-Fi</a>
    </div>
        }
        @if(statusError != null){
            loader
            = false;
    <!-- Error Alert -->
    <div class="alert alert-danger d-flex justify-content-between align-items-center" role="alert">
        <div class="d-flex align-items-center">
            <svg width="30" height="30" viewBox="0 0 290 290" fill="none" xmlns="http://www.w3.org/2000/svg">
                <ellipse cx="145" cy="145" rx="101" ry="97" fill="#F8D7DA" />
                <path d="M135.937 24.1855C98.2715 27.0176 64.0605 47.3516 43.0469 79.2969C20.4473 113.734 17.6719 160.35 35.9668 197.959C41.9707 210.307 48.2578 219.256 58.0566 229.338C70.8008 242.422 84.3379 251.484 100.934 257.998C114.98 263.436 128.234 265.871 144.717 265.871C159.5 265.871 170.035 264.342 182.553 260.264C221.918 247.52 252.277 214.951 262.529 174.453C266.041 160.633 267.004 141.262 264.908 127.441C260.83 100.934 248.029 76.0117 228.998 57.7734C203.963 33.7012 170.375 21.5801 135.937 24.1855ZM158.594 49.5039C187.084 53.2988 212.289 69.2715 226.449 92.4375C236.135 108.24 240.496 122.797 241.119 141.375C241.855 162.785 236.814 181.477 225.6 198.809C212.912 218.293 193.088 232.453 170.205 238.23C146.643 244.234 121.437 241.516 100.254 230.754C90.8515 225.939 83.7148 220.785 76.4648 213.535C69.2148 206.285 64.0605 199.148 59.2461 189.746C51.4863 174.453 48.2578 159.387 48.8808 141.375C49.5605 122.117 54.3183 106.824 64.457 91.1914C73.8594 76.748 85.4707 66.4961 101.67 58.5098C110.109 54.3184 120.191 51.1465 129.141 49.9004C131.463 49.5605 134.012 49.1641 134.805 49.0508C138.486 48.541 153.27 48.8242 158.594 49.5039Z" fill="#842029" />
                <path d="M104.502 97.1387C100.141 98.668 96.2891 104.162 96.2891 108.75C96.2891 113.281 96.9688 114.131 112.602 129.82L127.725 145L112.602 160.123C96.9688 175.869 96.2891 176.719 96.2891 181.25C96.2891 187.594 102.406 193.711 108.75 193.711C113.281 193.711 114.131 193.031 129.877 177.398L145 162.275L160.18 177.398C175.869 193.031 176.719 193.711 181.25 193.711C187.594 193.711 193.711 187.594 193.711 181.25C193.711 176.719 193.031 175.869 177.398 160.123L162.275 145L177.398 129.82C193.031 114.131 193.711 113.281 193.711 108.75C193.711 102.406 187.594 96.2891 181.25 96.2891C176.719 96.2891 175.869 96.9687 160.18 112.602L145 127.725L129.877 112.602C117.246 100.084 114.301 97.4219 112.432 96.9121C109.43 96.1191 107.277 96.1758 104.502 97.1387Z" fill="#842029" />
            </svg>
            <div class="mx-3">Erro - @statusError</div>
        </div>
            <a class="btn btn-outline-danger btn-sm" @onclick="@(() => aHide("statusErrorHide"))">Entendido</a>
    </div>
    }
        @if (loader == true)
        {

            <div id="wifi-loader">
                <svg class="circle-outer" viewBox="0 0 86 86">
                    <circle class="back" cx="43" cy="43" r="40"></circle>
                    <circle class="front" cx="43" cy="43" r="40"></circle>
                    <circle class="new" cx="43" cy="43" r="40"></circle>
                </svg>
                <svg class="circle-middle" viewBox="0 0 60 60">
                    <circle class="back" cx="30" cy="30" r="27"></circle>
                    <circle class="front" cx="30" cy="30" r="27"></circle>
                </svg>
                <svg class="circle-inner" viewBox="0 0 34 34">
                    <circle class="back" cx="17" cy="17" r="14"></circle>
                    <circle class="front" cx="17" cy="17" r="14"></circle>
                </svg>
                <div class="text" data-text="Carregando"></div>
            </div>
        }
</div>
    }
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>


@code {
    private string? statusAlert;
    private string? statusInfo;
    private string? statusError;
    private string? statusSuccess;
    private string ssidMinusculo;
    private string ssid;
    private string networkName;
    private string defaultGateway;
    private string ipAddress;
    private string? statusMessage { get; set; }
    private string? fileXMLPath;
    private bool loader;
    private static readonly HttpClient client = new HttpClient();

    protected override void OnInitialized()
    {

        string dbPath = FileUploadService.pathDB();

        using var db = new SQLiteConnection(dbPath);
        db.CreateTable<ExportInfo>();
        SetActiveMenu("importconfig");
    }

  


    private async Task CallJavaScriptAfterRender()
    {
        // Aguarda até a próxima renderização do componente
        await Task.Yield(); // Isso força a execução do código a continuar após a renderização
        await JSRuntime.InvokeVoidAsync("scrollToElement");
    }

    private bool TableExists(string tableName)
    {
        var _pathDB = FileUploadService.pathDB();

        // Conecta ao banco de dados
        using var db = new SQLiteConnection(_pathDB);

        // Executa uma consulta para verificar se a tabela existe no esquema
        var query = $"SELECT name FROM sqlite_master WHERE type='table' AND name='{tableName}';";

        var result = db.ExecuteScalar<string>(query);

        // Se result não for nulo ou vazio, a tabela existe
        return !string.IsNullOrEmpty(result);
    }

    private Task aHide(string status)
    {
        if (status == "statusAlertHide")
        {
            statusInfo = null;
        }
        else if (status == "statusErrorHide")
        {
            statusError = null;
        }


        return Task.CompletedTask;
    }

    private async Task ImportarConfig()
    {
        int contadorExecucoes = 0;
        loader
     = true;
        CallJavaScriptAfterRender();
        statusAlert = null;
        statusError = null;
        statusSuccess = null;
        statusInfo = null;




        ssid = await NetworkService.GetCurrentSSID();
        Debug.WriteLine($"SSID: {ssid}");

        if (ssid == "SSID Indisponível." || ssid == "")
        {
            statusError = "Conecte no Wi-Fi da balança Cuora Max!";
            return;
        }

        ssidMinusculo = ssid.ToLower();

        if (ssidMinusculo.StartsWith("xpicowifi") || ssidMinusculo.StartsWith("cuora"))
        {
            

            bool isMobileDataEnabled = NetworkService.IsMobileDataEnabled();
            if (isMobileDataEnabled)
            {
                Debug.WriteLine("Dados móveis estão ativados.");
                statusInfo = "Desative sua conexão com os dados móveis.";
                await CallJavaScriptAfterRender();
                return;
            }
            else
            {
                Debug.WriteLine("Dados móveis estão desativados.");
            }


            bool sendReq = false;

            try
            {
                var response = await BasicAuthWithFile("admin","admin");
            }
            catch (TaskCanceledException tex) when (tex.InnerException is TimeoutException)
            {
                statusError = "Conexão falhou por tempo estendido (timeout). Verifique sua rede e tente novamente.";
                StateHasChanged();
            }
            catch (HttpRequestException httpEx)
            {
                // Verificar se foi timeout ou falha de conexão
                if (httpEx.InnerException is SocketException socketEx)
                {
                    if (socketEx.SocketErrorCode == SocketError.TimedOut)
                    {
                        statusError = "A conexão com a balança falhou por timeout. Verifique sua rede ou tente novamente mais tarde.";
                    }
                    else if (socketEx.SocketErrorCode == SocketError.ConnectionRefused)
                    {
                        statusError = "Conexão recusada pela balança. Verifique se ela está ligada e conectada à rede correta.";
                    }
                    else
                    {
                        statusError = $"Erro de rede: {socketEx.Message}";
                    }
                }
                else
                {
                    statusError = "Erro ao enviar configuração. Verifique a conexão.";
                }
                StateHasChanged();
            }
            catch (Exception ex) // Captura qualquer outra exceção
            {
                // Verifica se a mensagem de exceção contém a string específica
                if (ex.Message.Contains("An error occurred while sending the request"))
                {
                    statusSuccess = "Cuora Max configurada com sucesso, reinicie sua balança!";
                    Debug.WriteLine($"Resposta do servidor (An error occurred while sending the request): {ex.Message}");
                    StateHasChanged();
                }
                else if (ex.Message.Contains("Object reference not set to an instance of an object.") && sendReq == true)
                {
                    // Para outros tipos de exceções
                    statusSuccess = "Configuração enviada para a balança com sucesso! Reinicie sua balança para atualizar a configuração.";
                    Debug.WriteLine($"Resposta do servidor (Object reference not set to an instance of an object.): {ex.Message}");
                    StateHasChanged();
                }
                else if (ex.Message.Contains("Object reference not set to an instance of an object."))
                {
                    statusError = "Conecte no Wi-Fi da balança Cuora Max!";
                    StateHasChanged();
                }
                else
                {
                    Debug.WriteLine($"Erro ao enviar configuração (Exception ex): {ex.Message}");
                    statusMessage = $"Erro ao enviar configuração (Exception ex): {ex.Message}";
                    StateHasChanged();
                }

                // Aqui você pode adicionar lógica adicional para registrar o erro ou exibi-lo ao usuário
            }



            async Task<HttpWebResponse> BasicAuthWithFile(string username, string password)
            {
                var url = new Uri("http://192.168.0.1/export/config");

                var request = (HttpWebRequest)WebRequest.Create(url);
                request.Method = "POST";
                var authValue = Convert.ToBase64String(Encoding.ASCII.GetBytes($"{username}:{password}"));
                request.Headers["Authorization"] = "Basic " + authValue;

                var boundary = "===" + DateTime.Now.Ticks.ToString("x") + "===";
                request.ContentType = $"multipart/form-data; boundary={boundary}";

                try
                {
                    // Obtendo o requestStream (a requisição já foi enviada ao servidor)
                    using (var requestStream = await request.GetRequestStreamAsync())
                    {

                        using (var writer = new StreamWriter(requestStream, Encoding.UTF8))
                        {



                            writer.Write($"--{boundary}\r\n");
                            writer.Write($"Content-Disposition: form-data; name=\"configrecord\";\"\r\n");
                            writer.Write($"Content-Type: application/xml\r\n\r\n");
                            writer.Flush();
                            writer.Write($"\r\n--{boundary}--\r\n");
                            writer.Flush();
                        }


                    }

                    // Obtendo a resposta do servidor
                    var response = (HttpWebResponse)await request.GetResponseAsync();
                    // Lê o corpo da resposta
                    using (var streamReader = new StreamReader(response.GetResponseStream()))
                    {
                        // sendReq = true; é para identificar o sucesso do envio de requisição
                        sendReq = true;
                        Debug.WriteLine("Requisição enviada com sucesso.");  // Log para indicar que foi enviada

                        string responseBody = streamReader.ReadToEnd();
                        if (response.StatusCode == HttpStatusCode.OK)  // Verifica se o status da resposta é 200 (OK)
                        {
                            statusMessage = (responseBody);
                            Debug.WriteLine($"Resposta do servidor (Status OK): {responseBody}");

                            // Carregando o conteúdo XML recebido
                            XElement xmlContent = XElement.Parse(responseBody);

                            // Função para obter o valor de um configitem específico dentro do grupo
                            string GetConfigValue(XElement xml, string itemName)
                            {
                                foreach (XElement item in xml.Elements("configitem"))
                                {
                                    if (item.Attribute("name")?.Value == itemName)
                                    {
                                        return item.Element("value")?.Value;
                                    }
                                }
                                return null;
                            }

                            // Percorrendo todos os grupos <configgroup>
                            foreach (XElement configGroup in xmlContent.Elements("configgroup"))
                            {
                                // Verificando se o grupo é da Interface "wlan0"
                                if (configGroup.Attribute("name")?.Value == "Interface" && configGroup.Attribute("instance")?.Value == "wlan0")
                                {
                                    // Extraindo os valores desejados apenas do grupo "wlan0"
                                    ipAddress = GetConfigValue(configGroup, "IP Address");
                                    defaultGateway = GetConfigValue(configGroup, "Default Gateway");

                                    // Exibindo os resultados
                                    Debug.WriteLine($"IP Address: {ipAddress}");
                                    Debug.WriteLine($"Default Gateway: {defaultGateway}");

                                }
                                if (configGroup.Attribute("name")?.Value == "WLAN Profile")
                                {
                                    // Procurando o valor do "Network Name" dentro do configGroup "Basic"
                                    var networkNameElement = configGroup.Descendants("value")
                                                                        .FirstOrDefault(v => v.Attribute("name")?.Value == "Network Name");

                                    networkName = networkNameElement?.Value;

                                    // Exibindo os resultados no Debug
                                    Debug.WriteLine($"Network Name: {networkName}");
                                }
                            }
                            saveExportInfoSQL(ipAddress, defaultGateway, networkName);
                        }
                    }

                    return response;
                }
                catch (WebException ex)
                {
                    if (ex.Response != null)
                    {
                        using (var responseStream = ex.Response.GetResponseStream())
                        {
                            if (responseStream != null)
                            {
                                using (var reader = new StreamReader(responseStream))
                                {
                                    string errorResponse = await reader.ReadToEndAsync();
                                    if (ex.Response is HttpWebResponse httpResponse)
                                    {


                                        if (httpResponse.StatusCode == HttpStatusCode.Unauthorized)
                                        {
                                            // Incrementa o contador na primeira execução
                                            contadorExecucoes++;

                                            // Verifica se é a primeira ou segunda execução
                                            if (contadorExecucoes == 1)
                                            {
                                                BasicAuthWithFile("admin", "PASSWORD");
                                            }
                                            else if (contadorExecucoes == 2)
                                            {
                                                SendConfigDigestAuth("admin","admin");
                                            }
                                        }
                                        else if (httpResponse.StatusCode == HttpStatusCode.NotFound)
                                        {
                                            statusError = "Conecte no Wi-Fi da balança Cuora Max!";
                                            CallJavaScriptAfterRender();
                                        }
                                    }
                                    else
                                    {
                                        statusMessage = $"Erro: {ex.Message}, Resposta: {errorResponse}";
                                    }
                                }
                            }
                        }
                    }
                    else if (ex.Message.Contains("The operation has timed out."))
                    {
                        statusSuccess = "Cuora Max configurada com sucesso, reinicie sua balança!";
                        Debug.WriteLine($"Resposta do servidor (The operation has timed out.): {ex.Message}");
                        StateHasChanged();
                    }
                    else if (ex.Message.Contains("An error occurred while sending the request"))
                    {
                        statusSuccess = "Cuora Max configurada com sucesso, reinicie sua balança!";
                        Debug.WriteLine($"Resposta do servidor (An error occurred while sending the request): {ex.Message}");
                        StateHasChanged();
                    }
                    else
                    {



                        Debug.WriteLine($"Erro de rede: {ex.Message}");
                    }

                    StateHasChanged();
                    return null;
                }
            }
        }
        else{
            statusError = "Conecte no Wi-Fi da balança Cuora Max!";
            return;
        }

    }





    private async Task SendConfigDigestAuth(string username, string password)
    {


        Debug.WriteLine("Iniciando envio de configuração...");

        FileUploadService.SaveXmlToFile();


        // Função para calcular o hash MD5 de uma string
        string Md5Hash(string data)
        {
            Debug.WriteLine($"Calculando hash MD5 para: {data}");
            using var md5 = MD5.Create();
            byte[] hashBytes = md5.ComputeHash(Encoding.UTF8.GetBytes(data));
            StringBuilder sb = new StringBuilder();
            foreach (byte b in hashBytes)
            {
                sb.Append(b.ToString("x2"));
            }
            Debug.WriteLine($"Hash MD5 calculado: {sb}");
            return sb.ToString();
        }

        // Função para extrair valores dos parâmetros do cabeçalho WWW-Authenticate
        Dictionary<string, string> ExtractDigestParts(string header)
        {
            Debug.WriteLine($"Extraindo partes do cabeçalho WWW-Authenticate: {header}");
            var values = new Dictionary<string, string>();
            var pattern = new Regex(@"(\w+)=[\""']?([^\"",]+)[\""']?");
            var matches = pattern.Matches(header);

            foreach (Match match in matches)
            {
                values[match.Groups[1].Value] = match.Groups[2].Value;
                Debug.WriteLine($"Extraído: {match.Groups[1].Value} = {match.Groups[2].Value}");
            }

            return values;
        }

        // Função para realizar a autenticação digest com MD5 e enviar o arquivo
        async Task<HttpWebResponse> DigestAuthWithFile(string urlString, string username, string password, string filePath)
        {
            Debug.WriteLine($"Iniciando autenticação Digest para URL: {urlString}");
            var url = new Uri(urlString);
            var request = (HttpWebRequest)WebRequest.Create(url);
            request.Method = "POST";

            // Primeira requisição sem autenticação para obter o desafio digest
            HttpWebResponse httpResponse;
            try
            {
                Debug.WriteLine("Enviando primeira requisição sem autenticação...");
                httpResponse = (HttpWebResponse)await request.GetResponseAsync();
                if (httpResponse.StatusCode != HttpStatusCode.Unauthorized)
                {
                    Debug.WriteLine($"Resposta recebida sem autenticação, status: {httpResponse.StatusCode}");
                    return httpResponse;
                }
            }
            catch (WebException ex)
            {
                Debug.WriteLine("Recebido erro na primeira requisição (esperado para obter o desafio digest)...");
                httpResponse = (HttpWebResponse)ex.Response;
                if (httpResponse.StatusCode != HttpStatusCode.Unauthorized)
                {
                    Debug.WriteLine($"Erro inesperado: {ex.Message}");
                    throw;
                }
            }

            // Obtém o cabeçalho WWW-Authenticate que contém os parâmetros do Digest
            string authHeader = httpResponse.Headers["WWW-Authenticate"];
            Debug.WriteLine($"Cabeçalho WWW-Authenticate recebido: {authHeader}");
            if (string.IsNullOrEmpty(authHeader))
            {
                Debug.WriteLine("O cabeçalho WWW-Authenticate não foi encontrado.");
                throw new InvalidOperationException("O cabeçalho WWW-Authenticate não foi encontrado na resposta.");
            }

            var parts = ExtractDigestParts(authHeader);

            // Extrai valores de realm, nonce, etc.
            if (!parts.TryGetValue("realm", out var realm) ||
                !parts.TryGetValue("nonce", out var nonce) ||
                !parts.TryGetValue("qop", out var qop))
            {
                Debug.WriteLine("Os valores 'realm', 'nonce' ou 'qop' não foram encontrados.");
                throw new InvalidOperationException("Os valores 'realm', 'nonce' ou 'qop' não podem ser nulos.");
            }

            Debug.WriteLine($"Valores extraídos - Realm: {realm}, Nonce: {nonce}, Qop: {qop}");

            // Configura os valores para o cálculo do hash MD5
            var method = "POST";
            var uri = urlString;

            // HA1: md5(username:realm:password)    
            var ha1 = Md5Hash($"{username}:{realm}:{password}");

            // HA2: md5(method:uri)
            var ha2 = Md5Hash($"{method}:{uri}");

            // Resposta Digest: md5(HA1:nonce:nc:cnonce:qop:HA2)
            var nc = "00000001"; // Nonce Count
            var cnonce = "xyz"; // Client Nonce (valor qualquer, como "xyz")
            var responseDigest = Md5Hash($"{ha1}:{nonce}:{nc}:{cnonce}:{qop}:{ha2}");

            Debug.WriteLine($"Digest calculado: {responseDigest}");

            // Monta o valor do cabeçalho Authorization conforme o padrão Digest
            var authValue = $"Digest username=\"{username}\", realm=\"{realm}\", nonce=\"{nonce}\", uri=\"{uri}\", " +
                            $"response=\"{responseDigest}\", qop={qop}, nc={nc}, cnonce=\"{cnonce}\", algorithm=MD5";

            Debug.WriteLine($"Cabeçalho Authorization montado: {authValue}");

            // Cria a nova conexão para enviar o arquivo com autenticação
            request = (HttpWebRequest)WebRequest.Create(url);
            request.Method = "POST";
            request.Headers["Authorization"] = authValue;

            // Cria o body da requisição multipart/form-data
            var boundary = "===" + DateTime.Now.Ticks.ToString("x") + "===";
            request.ContentType = $"multipart/form-data; boundary={boundary}";
            request.AllowWriteStreamBuffering = true;

            Debug.WriteLine($"Enviando arquivo {filePath} com tipo de conteúdo {request.ContentType}");

            using (var requestStream = await request.GetRequestStreamAsync())
            using (var writer = new StreamWriter(requestStream, Encoding.UTF8))
            {
                // Adiciona o arquivo ao multipart/form-data
                var filePathName = Path.GetFileName(filePath);
                writer.Write($"--{boundary}\r\n");
                writer.Write($"Content-Disposition: form-data; name=\"configrecord\"; filename=\"{filePathName}\"\r\n");
                string mimeType = GetMimeType(filePath);
                writer.Write($"Content-Type: {mimeType}\r\n");
                writer.Write("\r\n");
                writer.Flush();

                // Copia o conteúdo do arquivo
                using (var fileStream = File.OpenRead(filePath))
                {
                    Debug.WriteLine($"Lendo e copiando o conteúdo do arquivo: {filePathName}");
                    await fileStream.CopyToAsync(requestStream);
                }

                writer.Write("\r\n");
                writer.Write($"--{boundary}--\r\n");
                writer.Flush();
            }


            Debug.WriteLine("Configuração enviada, aguardando resposta da balança.");
            StateHasChanged();

            // Lê a resposta do servidor
            using (var response = (HttpWebResponse)await request.GetResponseAsync())
            {
                using (var responseStream = response.GetResponseStream())
                using (var reader = new StreamReader(responseStream))
                {
                    string responseContent = await reader.ReadToEndAsync();
                    // Adiciona a resposta ao statusMessage


                    // Verifica se o código de status da resposta é 200 (OK)
                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        statusSuccess = "Cuora Max configurada com sucesso, reinicie sua balança!";
                        Debug.WriteLine($"Resposta do servidor: {responseContent}");
                        StateHasChanged();

                        // Carregando o conteúdo XML recebido
                        XElement xmlContent = XElement.Parse(responseContent);

                        // Função para obter o valor de um configitem específico dentro do grupo
                        string GetConfigValue(XElement xml, string itemName)
                        {
                            foreach (XElement item in xml.Elements("configitem"))
                            {
                                if (item.Attribute("name")?.Value == itemName)
                                {
                                    return item.Element("value")?.Value;
                                }
                            }
                            return null;
                        }

                        // Percorrendo todos os grupos <configgroup>
                        foreach (XElement configGroup in xmlContent.Elements("configgroup"))
                        {
                            // Verificando se o grupo é da Interface "wlan0"
                            if (configGroup.Attribute("name")?.Value == "Interface" && configGroup.Attribute("instance")?.Value == "wlan0")
                            {
                                // Extraindo os valores desejados apenas do grupo "wlan0"
                                 ipAddress = GetConfigValue(configGroup, "IP Address");
                                 defaultGateway = GetConfigValue(configGroup, "Default Gateway");

                                // Exibindo os resultados
                                Debug.WriteLine($"IP Address: {ipAddress}");
                                Debug.WriteLine($"Default Gateway: {defaultGateway}");

                            }
                            if (configGroup.Attribute("name")?.Value == "WLAN Profile")
                            {
                                // Procurando o valor do "Network Name" dentro do configGroup "Basic"
                                var networkNameElement = configGroup.Descendants("value")
                                                                    .FirstOrDefault(v => v.Attribute("name")?.Value == "Network Name");

                                networkName = networkNameElement?.Value;
                                

                                // Exibindo os resultados no Debug
                                Debug.WriteLine($"Network Name: {networkName}");
                            }
                        }
                        saveExportInfoSQL(ipAddress, defaultGateway, networkName);
                    }
                    else{
                        statusMessage = $"Resposta do servidor: {response.StatusCode} - {responseContent}";
                        StateHasChanged();
                        Debug.WriteLine($"Resposta do servidor: {responseContent}");
                    }
                }
                return response;
            }

        }

        string GetMimeType(string filePath)
        {
            string extension = Path.GetExtension(filePath).ToLowerInvariant();
            Debug.WriteLine($"Identificando MIME type para o arquivo: {filePath}");

            switch (extension)
            {
                case ".txt": return "text/plain";
                case ".xml": return "application/xml";
                case ".jpg": return "image/jpeg";
                case ".png": return "image/png";
                case ".pdf": return "application/pdf";
                // Adicione mais extensões conforme necessário
                default: return "application/octet-stream";
            }
        }

        // Executando a função de envio
        string url = "http://192.168.0.1/export/config";
        string _filePathExport = FileUploadService.SaveXmlToFile(); // Agora deve funcionar corretamente

        try
        {
            Debug.WriteLine($"Tentando enviar arquivo para {url}...");
            var response = await DigestAuthWithFile(url, username, password, _filePathExport);

            // Verifica se o código de status da resposta é 401 (Unauthorized)
            if (response.StatusCode == HttpStatusCode.Unauthorized)
            {
                Debug.WriteLine("Erro 401 - Não autorizado. Tentando outra autenticação.");
                // Chame a função que deseja para tratar erro 401
                SendConfigDigestAuth("admin", "PASSWORD");
            }
            else
            {
                // Sucesso ou outro código de status
                Debug.WriteLine("Arquivo enviado com sucesso!");
            }
        }
        catch (WebException webEx)
        {
            // Verifica se existe uma resposta associada à exceção
            if (webEx.Response is HttpWebResponse httpResponse)
            {
                string errorResponse = string.Empty; // Armazena a resposta
                try
                {
                    // Verifica se o erro foi 401 (Unauthorized)
                    if (httpResponse.StatusCode == HttpStatusCode.Unauthorized)
                    {
                        Debug.WriteLine("Erro 401 - Não autorizado. Tentando outra autenticação.");
                        SendConfigDigestAuth("admin", "PASSWORD");
                    }
                    else
                    {
                        // Trata outros erros e captura a resposta do servidor
                        using (var responseStream = httpResponse.GetResponseStream())
                        {
                            if (responseStream != null)
                            {
                                using (var reader = new StreamReader(responseStream))
                                {
                                    errorResponse = await reader.ReadToEndAsync();
                                }
                            }
                        }
                        Debug.WriteLine($"Erro ao enviar configuração: {webEx.Message}, Resposta: {errorResponse}");
                        statusMessage = $"Erro ao enviar configuração: {webEx.Message}, Resposta: {errorResponse}";
                        StateHasChanged();
                    }
                }
                finally
                {
                    // Certifique-se de liberar o objeto httpResponse no final
                    httpResponse.Dispose();
                }
            }
            else if (webEx.Message == "An error occurred while sending the request.")
            {
                Debug.WriteLine($"Erro ao enviar configuração: {webEx.Message}");
                statusError = "Erro ao enviar a configuração para a balança, verifique se está conectado no Wi-Fi correto";
                StateHasChanged();
            }
            else{
                Debug.WriteLine($"Erro ao enviar configuração: {webEx.Message}");
                statusMessage = $"Erro ao enviar configuração: {webEx.Message}";
                StateHasChanged();
            }
        }

    }



    private async Task SetActiveMenu(string menuId)
    {
        // Chama a função JavaScript passando o ID do menu ativo
        await JSRuntime.InvokeVoidAsync("setActiveClass", menuId);
    }

    private string saveExportInfoSQL(string ipAddress, string defaultGateway, string networkName)
    {
        // Salvando no SQLite
        using var db = new SQLiteConnection(FileUploadService.pathDB());

        var table = db.Table<ExportInfo>().FirstOrDefault(c => c.Id == ssid);
        if (table is null)
        {
            var exportInfo = new ExportInfo
                {
                    Id = ssid,
                    IP_Address = ipAddress,
                    Default_Gateway = defaultGateway,
                    Network_Name = networkName
                };

            db.Insert(exportInfo);
        }
        else
        {
            table.IP_Address = ipAddress;
            table.Default_Gateway = defaultGateway;
            table.Network_Name = networkName;
            db.Update(table);
        }

        statusSuccess = "Informações de rede salvas.";
        CallJavaScriptAfterRender();
        StateHasChanged();
        Debug.WriteLine("Informações de rede salvas.");
        return "";
    }
}

