@page "/"
@using System;
@using System.Net.Http;
@using System.Threading.Tasks;
@using System.Xml.Linq;
@inject PagesStepper PagesStepper


<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<MudPaper id="pop-up" Style="    margin: 30px 15px 40px 15px;   padding: 0px !important;">
    <div class="barCardImport" />
    <MudStepper @bind-ActiveIndex="@PagesStepper.page" NonLinear CenterLabels="true" ShowResetButton>

        <MudStep Title="Passo 1"  SecondaryText="Wi-Fi do seu Comércio" >
            <Home></Home>


         
        </MudStep>
        <MudStep Title="Passo 2" SecondaryText="Informações do Wi-Fi">
            <Wi_FiConfig></Wi_FiConfig>
        

        </MudStep>
        <MudStep Title="Passo 3" SecondaryText="Enviar configuração">
            <SendConfig></SendConfig>
        </MudStep>
    </MudStepper>
    
</MudPaper>







@code {

    protected override void OnInitialized()
    {
        // Assine o evento para notificar quando a página mudar
        PagesStepper.OnPageChanged += StateHasChanged;

        getLicense();
    }

    public async void getLicense()
    {
        string url = "https://github.com/RafaelNovSantos/CuoraConnect/licenca/activelicense.xml"; // Substitua pela URL real

        using (HttpClient client = new HttpClient())
        {
            try
            {
                string xmlContent = await client.GetStringAsync(url);
                XDocument xdoc = XDocument.Parse(xmlContent);

                Debug.WriteLine("XML carregado com sucesso!");
                Debug.WriteLine($"Conteudo xml: {xdoc}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Erro ao acessar o XML: {ex.Message}");
            }
        }
    }

    public void Dispose()
    {
        // Desinscreva-se do evento quando o componente for descartado
        PagesStepper.OnPageChanged -= StateHasChanged;
    }
    
}