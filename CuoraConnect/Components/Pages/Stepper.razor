@page "/"


<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<MudPaper id="pop-up" Style="    margin: 30px 15px 40px 15px;   padding: 0px !important;">
    <div class="barCardImport" />
    <MudStepper NonLinear CenterLabels="true" ShowResetButton OnPreviewInteraction="OnPreviewInteraction">

        <MudStep Title="Passo 1"  SecondaryText="Conecte no Wi-Fi do seu Comércio" HasError="@(_step1Complete==false)">

            <ol style="--length: 5">
                <li  style="--i: 1; text-align: center;  counter-reset: list 1;">
                    <h4 class="titleCard">Conecte no Wi-Fi do seu comércio para buscar as configurações.</h4>
                    <p>Após conectar no Wi-Fi do seu estabelecimento, verifique o status de conexão clicando no botão abaixo.</p>
                    <a @onclick="DataMobileInfo" class="btn btn-primary mt-3">Verificar conexão</a>
                </li>
            </ol>
         
        </MudStep>
        <MudStep Title="Passo 2" SecondaryText="Informações da rede Wi-Fi do seu Comércio" HasError="@(_step2TextInput=="")">
            <ol style="--length: 5;">
                <li style="--i: 3; counter-reset: list 2;">

                    <div class="href-target" id="icons"></div>
                    <form action="/action_page.php" class="was-validated">
                        <div class="nice-form-group" style="margin-top: 10px;">
                            <label for="ssidInput" class="form-label">Sua Rede (SSID):</label>
                            <input type="text" id="ssidInput" placeholder="Wi-Fi do seu comércio" @bind="ssid" pattern=".*\S+.*" required="@(IsRequiredSSID ? "required" : null)">
                            <div class="valid-feedback"></div>
                            <div class="invalid-feedback">Preencha o nome da rede (SSID).</div>
                            <div class="invalid-feedback" style="display: @(isValidSSID ? "none" : "block")">Não é possível configurar em redes 5g, somente 2.4g.</div>
                        </div>
                        @if (ssidSave != ssid && isValidSSID == true)
                        {
                            IsRequiredSSID = true;
                            // IsRequiredSSID true mostra a borda verde em caso do campo ssid preenchido
                        }

                        <div class="nice-form-group" style="/* display: flex; *//* align-items: center; */">
                            <label for="pwd" class="form-label">Senha do Wi-Fi:</label>
                            <input type="@PasswordInputType" class="" id="pwd" placeholder="Senha do Wi-Fi do seu comércio" @bind="password" minlength="8" required="@(IsRequiredPassword ? "required" : null)">
                            <button type="button" style="background-color: transparent;border: transparent;width: 50px;height: 44px;right: 10%;position: absolute;" @onclick="TogglePasswordVisibility"><i class="@PasswordIconClass"></i></button>
                            <div class="valid-feedback"></div>
                            <div class="invalid-feedback">A senha deve conter pelo menos 8 caracteres.</div>
                        </div>


                        <div class="nice-form-group">
                            <label for="gatewayInput" class="form-label">IP do roteador:</label>
                            <input type="text" id="gatewayInput" placeholder="Ex: 192.168.0.1" @bind="gateway" pattern="^([0-9]{1,3}\.){3}[0-9]{1,3}$" required="@(IsRequiredGateway ? "required" : null)">
                            <div class="valid-feedback"></div>
                            <div class="invalid-feedback">Insira um IP válido.</div>
                        </div>

                        <div class="nice-form-group">
                            <label for="subnetMask" class="form-label">Máscara de Rede:</label>
                            <input type="text" id="subnetMask" placeholder="Ex: 255.255.255.0" @bind="subnetMask" pattern="^([0-9]{1,3}\.){3}[0-9]{1,3}$" required="@(IsRequiredSubnetMask ? "required" : null)">
                            <div class="valid-feedback"></div>
                            <div class="invalid-feedback">Insira uma máscara de rede válida.</div>
                        </div>

                        <div class="nice-form-group">
                            <label for="availableIPInput" class="form-label">IP Disponível:</label>
                            <input type="text" id="availableIPInput" placeholder="Ex: 192.168.0.10" @bind="availableIP" pattern="^([0-9]{1,3}\.){3}[0-9]{1,3}$" required="@(IsRequiredAvailableIP ? "required" : null)">
                            <div class="valid-feedback"></div>
                            <div class="invalid-feedback">Insira um IP válido.</div>
                        </div>


                        <a class="btn btn-primary mt-2" @onclick="GetNetworkInfo">Obter Informações da Rede</a>
                        <a class="btn btn-success mt-2" @onclick="() => SaveNetworkInfo()">Salvar Alterações</a>
                    </form>
                </li>
            </ol>

        </MudStep>
        <MudStep Title="Passo 3" SecondaryText="Enviar configuração para a balança"></MudStep>
    </MudStepper>
    
</MudPaper>



<script>

    function scrollToElement() {
        // Rola até o final da página
        window.scrollTo({
            top: document.body.scrollHeight, // Altura total do corpo da página
            behavior: 'smooth' // Rolagem suave
        });
    }
    const passwordInput = document.getElementById('pwd');
    const togglePasswordButton = document.getElementById('togglePassword');
    const icon = togglePasswordButton.querySelector('i');

    togglePasswordButton.addEventListener('click', () => {
        // Alterna entre 'password' e 'text'
        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordInput.setAttribute('type', type);

        // Alterna o ícone entre olho aberto e fechado
        icon.classList.toggle('bi-eye');
        icon.classList.toggle('bi-eye-slash');
    });
</script>



@code {

    private async Task<string> DataMobileInfo()
    {
        // Verifica se está rodando no Android
        if (DeviceInfo.Platform == DevicePlatform.Android)
        {
            var statusPermission = await NetworkService.CheckAndRequestLocationPermission();
            Debug.WriteLine($"Status Permissão de localização: {statusPermission}");

            // Se a permissão não for concedida, mostra o diálogo
            if (statusPermission != PermissionStatus.Granted)
            {
                ShowLocationPermissionDialog();
                return "";
            }
        }

        loader
    = true;
        CallJavaScriptAfterRender();
        CleanStatus();

        bool isMobileDataEnabled = NetworkService.IsMobileDataEnabled();

        if (isMobileDataEnabled)
        {
            Debug.WriteLine("Dados móveis estão ativados.");
            statusError = "Desative sua conexão com os dados móveis.";
            await CallJavaScriptAfterRender();
            return "";
        }
        else
        {
            Debug.WriteLine("Dados móveis estão desativados.");
        }


        string connected5g = await NetworkService.IsConnectedTo5G();
        if (connected5g == "Conectado a 5 GHz")
        {
            Debug.WriteLine("Conectado no 5g");
            statusError = "Não é possível configurar em redes Wi-Fi 5g, conecte em uma rede Wi-Fi 2.4g";
            CallJavaScriptAfterRender();

            return "";
        }
        else if (connected5g == "Conectado a 2.4 GHz")
        {
            Debug.WriteLine("Conexão 2.4g");
        }
        else
        {
            statusError = $"Interface de rede: {connected5g}";
        }


        // Obtém o SSID
        string ssid = await NetworkService.GetInfoInterface("SSID");
        Debug.WriteLine($"SSID: {ssid}");

        ssidMinusculo = ssid.ToLower();

        if (ssidMinusculo.Contains("xpicowifi") || ssidMinusculo.Contains("cuora"))
        {
            statusError = "Desconecte da rede Cuora Max e conecte na rede do seu estabelecimento.";
            await CallJavaScriptAfterRender();
        }
        else if (ssid == "Nenhuma conexão Wi-Fi ativa" || ssid == "" || ssid == "SSID Indisponível.")
        {
            statusError = "Nenhuma conexão Wi-Fi ativa, conecte na rede do seu estabelecimento.";
            await CallJavaScriptAfterRender();
        }
        else
        {

            statusSuccess = $"Conectado na rede {ssid} pode prosseguir para o próximo passo!";


        }

        return "";
    }

    private bool? _step1Complete;
    private string _step2TextInput;

    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.Action == StepAction.Complete)
        {
            // occurrs when clicking next
            await ControlStepCompletion(arg);
        }
        else if (arg.Action == StepAction.Activate)
        {
            // occurrs when clicking a step header with the mouse
            await ControlStepNavigation(arg);
        }
    }

    private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
    {
        _step1Complete = true;
        switch (arg.StepIndex)
        {
            
            case 0:
                if (_step1Complete != true)
                {
                    var errorOneStep = await DialogService.ShowMessageBox("Error", "You have not flipped the switch in step 1");
                    arg.Cancel = true;
                }
                break;
            case 1:
                if ((_step2TextInput?.Length ?? 0) == 0)
                {
                  var errorTwoStep = await DialogService.ShowMessageBox("Error", "You have not entered text in step 2");
                    arg.Cancel = true;
                }
                break;
        }
    }

    private async Task ControlStepNavigation(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 1:
                if (_step1Complete != true)
                {
                    await DialogService.ShowMessageBox("Error", "Finish step 1 first");
                    arg.Cancel = true;
                }
                break;
            case 2:
                if (_step1Complete != true || (_step2TextInput?.Length ?? 0) == 0)
                {
                    await DialogService.ShowMessageBox("Error", "Finish step 1 and 2 first");
                    arg.Cancel = true;
                }
                break;
        }
    }
    private string? statusSuccess;
    private string? statusAlert;
    private string? statusError;
    private string? statusInfo;
    private bool loader;
    private string ssidMinusculo;
    private bool isValidSSID { get; set; } = true;
    private bool IsRequiredSSID;
    private bool IsRequiredPassword;
    private bool IsRequiredGateway;
    private bool IsRequiredSubnetMask;
    private bool IsRequiredAvailableIP;
    private string ssid = "";
    private string bssid = "";
    private string gateway = "";
    private string localIP = "";
    private string availableIP = "";
    private string password = "";
    private string subnetMask = "";
    private int cidr;
    private List<string> networks = new List<string>();
    private string ssidSave = "";
    private string dbPath;
    private bool isNavigatingAway;
    private int countErrorNetwork = 0;



    // Função para alternar o estado do body
    private async Task ToggleBody(bool activeisBodyDisabled)
    {
        if (activeisBodyDisabled)
        {
            loader = true;
            await JSRuntime.InvokeVoidAsync("document.body.classList.add", "disabled-body");
            Console.WriteLine("Added 'disabled-body' class.");

            // Tente adicionar logs para depuração
            var navElement = await JSRuntime.InvokeAsync<string>("eval", "document.querySelector('#nav-mobile')");
            var sidebarElement = await JSRuntime.InvokeAsync<string>("eval", "document.querySelector('.sidebar')");

            Console.WriteLine($"Nav Element: {navElement}, Sidebar Element: {sidebarElement}");

            await JSRuntime.InvokeVoidAsync("document.querySelector('#nav-mobile').style.opacity", "0.9");
            await JSRuntime.InvokeVoidAsync("document.querySelector('.sidebar').style.opacity", "0.9");
        }
        else
        {
            loader = false;
            await JSRuntime.InvokeVoidAsync("document.body.classList.remove", "disabled-body");
            Console.WriteLine("Removed 'disabled-body' class.");
            await JSRuntime.InvokeVoidAsync("document.querySelector('.navigation').classList.remove", "disable-menu");
            await JSRuntime.InvokeVoidAsync("document.querySelector('.sidebar').classList.remove", "disable-menu");
        }

        StateHasChanged();
    }






    // Inicializa o caminho do banco de dados e cria a tabela
    protected override void OnInitialized()
    {

        string dbPath = FileUploadService.pathDB();

        using var db = new SQLiteConnection(dbPath);
        db.CreateTable<NetworkInfo>();
    }

    protected override async Task OnInitializedAsync()
    {

        await SetActiveMenu("Wi-FiConfig");

    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(150);
            // await GetNetworkInfo();


        }
    }


    public void Dispose()
    {
        // Certifique-se de remover o evento para evitar vazamentos de memória
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        // Aqui você pode definir uma lógica para quando a navegação acontece
        // Exemplo: se quiser cancelar algum processamento quando a página for trocada
        isNavigatingAway = true; // ou outra lógica para cancelar ações
    }


    // Variável para controlar a visibilidade da senha
    private bool isPasswordVisible = false;

    // Propriedade para o tipo do input
    private string PasswordInputType => isPasswordVisible ? "text" : "password";

    // Propriedade para o ícone
    private string PasswordIconClass => isPasswordVisible ? "bi bi-eye-slash" : "bi bi-eye";

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    private async Task CallJavaScriptAfterRender()
    {
        // Aguarda até a próxima renderização do componente
        await Task.Yield(); // Isso força a execução do código a continuar após a renderização
        await JSRuntime.InvokeVoidAsync("scrollToElement");
    }


    private Task aHide(string status)
    {
        if (status == "statusAlertHide")
        {
            statusAlert = null;
        }
        else if (status == "statusErrorHide")
        {
            statusError = null;
        }
        else if (status == "statusSuccessHide")
        {
            statusSuccess = null;
        }
        else if (status == "statusInfoHide")
        {
            statusInfo = null;
        }

        // isValidSSID true oculta a mensagem de erro em caso de 5g habilitado no wi-fi no input SSID
        isValidSSID = true;
        return Task.CompletedTask;
    }

    private bool isValid(bool isValidInput)
    {
        // Usando o valor passado para definir as propriedades
        IsRequiredGateway = isValidInput;
        IsRequiredSubnetMask = isValidInput;
        IsRequiredAvailableIP = isValidInput;
        IsRequiredPassword = isValidInput;
        StateHasChanged();
        // Retorna o valor de isValidInput
        return isValidInput;
    }



    private string CleanStatus()
    {
        statusAlert = null;
        statusError = null;
        statusSuccess = null;
        statusInfo = null;
        StateHasChanged();
        return "";
    }


    private string CleanInputs()
    {

        gateway = "";
        localIP = "";
        availableIP = "";
        password = "";
        subnetMask = "";
        return "";
    }
    public int ConvertSubnetMaskToCIDR(string subnetMask)
    {

        // Divide a máscara em octetos
        string[] parts = subnetMask.Split('.');
        int cidr = 0;

        foreach (var part in parts)
        {
            // Converte cada octeto para um inteiro
            byte octet = byte.Parse(part);
            // Conta o número de bits `1` no octeto
            cidr += CountBits(octet);
        }
        Debug.WriteLine($"SubNetMask: {subnetMask}");
        Debug.WriteLine($"CIDR: {cidr}");
        return cidr;

    }


    public async Task ShowLocationPermissionDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialogReference = await DialogService.ShowAsync<LocationPermissionDialog>("Permissão de Localização", options);

    }

    private int CountBits(byte octet)
    {
        int count = 0;
        while (octet > 0)
        {
            count += octet & 1; // Incrementa se o bit menos significativo for `1`
            octet >>= 1; // Desloca o bit para a direita
        }
        return count;
    }

    private async Task GetNetworkInfo()
    {
        // Verifica se está rodando no Android
        if (DeviceInfo.Platform == DevicePlatform.Android)
        {
            var statusPermission = await NetworkService.CheckAndRequestLocationPermission();
            Debug.WriteLine($"Status Permissão de localização: {statusPermission}");

            // Se a permissão não for concedida, mostra o diálogo
            if (statusPermission != PermissionStatus.Granted)
            {
                ShowLocationPermissionDialog();
                return;
            }
        }




        // Verifica se a navegação ocorreu antes de iniciar a lógica do método
        NavigationManager.LocationChanged += OnLocationChanged;
        if (isNavigatingAway) return;


        ToggleBody(true);



        CallJavaScriptAfterRender();
        CleanStatus();
        CleanInputs();
        ssid = "";

        Debug.WriteLine("Tentando obter informações da rede...");

        try
        {
            await Task.Run(async () =>
       {
       ssid = await NetworkService.GetInfoInterface("SSID");
       bssid = await NetworkService.GetInfoInterface("BSSID");
       Debug.WriteLine($"BSSID da rede {bssid}");
       // Verifica se a navegação ocorreu após a chamada assíncrona
       NavigationManager.LocationChanged += OnLocationChanged;
       if (isNavigatingAway) return;

       Debug.WriteLine($"SSID: {ssid}");
       ssidSave = ssid;
       if (ssid == "" || ssid == "SSID Indisponível.")
       {
           ssid = "";
           statusError = "Nenhuma conexão Wi-Fi ativa, conecte no Wi-Fi do seu estabelecimento.";
           await InvokeAsync(StateHasChanged);
           CallJavaScriptAfterRender();
           return;
       }
       ssidMinusculo = ssid.ToLower();

       if (ssidMinusculo.Contains("xpicowifi") || ssidMinusculo.Contains("cuora"))
       {

           statusError = "Desconecte da rede Cuora Max e conecte na rede do seu estabelecimento";
           CleanInputs();
           await InvokeAsync(StateHasChanged);
           await InvokeAsync(CallJavaScriptAfterRender);
           // isValid(true);
           return;
       }


       bool isMobileDataEnabled = NetworkService.IsMobileDataEnabled();
       if (isMobileDataEnabled)
       {
           Debug.WriteLine("Dados móveis estão ativados.");
           statusError = "Desative sua conexão com os dados móveis.";
           await InvokeAsync(CallJavaScriptAfterRender);
           // isValid(true);
           return;
       }
       else
       {
           Debug.WriteLine("Dados móveis estão desativados.");
       }

       // Verifica se a navegação ocorreu após a chamada assíncrona
       NavigationManager.LocationChanged += OnLocationChanged;
       if (isNavigatingAway) return;


       string connected5g = await NetworkService.IsConnectedTo5G();
       if (connected5g == "Conectado a 2.4 GHz")
       {
           IsRequiredSSID = true;
           isValidSSID = true;
           Debug.WriteLine("Conexão 2.4g");
       }
       else if (connected5g == "Conectado a 5 GHz")
       {
           Debug.WriteLine("Conectado no 5g");
           // isValidSSID false mostra a mensagem de erro em caso de 5g habilitado no wi-fi
           isValidSSID = false;
           // IsRequiredSSID false oculta a borda verde em caso de 5g habilitado no wi-fi
           IsRequiredSSID = false;
           statusError = "Não é possível configurar em redes Wi-Fi 5g, conecte em uma rede Wi-Fi 2.4g";
           CallJavaScriptAfterRender();

           // return;
       }

       else if (connected5g == "Nenhuma rede conectada")
       {
           ssid = "";
           statusError = "Nenhuma conexão Wi-Fi ativa, conecte no Wi-Fi do seu estabelecimento.";
           await InvokeAsync(StateHasChanged);
           CallJavaScriptAfterRender();
           return;
       }
       else
       {
           statusError = $"Interface de rede: {connected5g}";
       }

       // Verifica se a navegação ocorreu após a chamada assíncrona
       NavigationManager.LocationChanged += OnLocationChanged;
       if (isNavigatingAway) return;

       Debug.WriteLine("Serviço de rede obtido.");

       // Obtém o SSID
       Debug.WriteLine($"SSID: {ssid}");

       // Obtém o Gateway Padrão
       gateway = await NetworkService.GetDefaultGateway();
       if (gateway == "Gateway não encontrado para o SSID especificado." || gateway == "Gateway padrão não encontrado.")
       {
           gateway = "";
           statusAlert = "Gateway não encontrado, clique em obter informações da rede para tentar novamente.";
       }
       Debug.WriteLine($"Gateway Padrão: {gateway}");



       // Obtém o IP Local
       localIP = NetworkService.GetLocalIPAddress();
       Debug.WriteLine($"IP Local: {localIP}");





       subnetMask = await NetworkService.GetSubnetMask();
       Debug.WriteLine($"Máscara disponível: {subnetMask}");




       // Obtém o IP disponível
       availableIP = await NetworkService.GetAvailableIPAddress();
       Debug.WriteLine($"IP Disponível: {availableIP}");

       if (availableIP == "Não foi possível encontrar IP disponível na rede.")
       {
           availableIP = "";
           statusAlert = "Não foi possível encontrar IP disponível na rede, clique em obter informações da rede para tentar novamente.";
       }




       if (ssid != null && gateway != null && availableIP != null && subnetMask != null)
       {
           if (statusError == "Nenhuma conexão Wi-Fi ativa, conecte no Wi-Fi do seu estabelecimento." || statusError == "Interface de rede: Nenhum adaptador Wi-Fi encontrado. Tentando novamente.") { statusError = null; }
       }


       await InvokeAsync(StateHasChanged);
       // Verifica se a navegação ocorreu após a chamada assíncrona
       NavigationManager.LocationChanged += OnLocationChanged;
       if (isNavigatingAway) return;


       });
        }
        catch (Exception ex)
        {
            while (countErrorNetwork <= 3)
            {
                countErrorNetwork++;

                Debug.WriteLine($"Erro: {ex.Message}");
                // Verifica se a navegação ocorreu após a chamada assíncrona
                NavigationManager.LocationChanged += OnLocationChanged;
                if (isNavigatingAway) return;
                GetNetworkInfo();
            }

            if (ex.Message == null)
            {
                // Verifica se a navegação ocorreu após a chamada assíncrona
                NavigationManager.LocationChanged += OnLocationChanged;
                if (isNavigatingAway) return;
                statusInfo = "Ocorreu algum conflito, tente obter informações da rede novamente.";
                Debug.WriteLine($"Erro: {ex.Message}");
                await InvokeAsync(StateHasChanged);
                return;
            }
            // Verifica se a navegação ocorreu após a chamada assíncrona
            NavigationManager.LocationChanged += OnLocationChanged;
            if (isNavigatingAway) return;
            statusError = $"Erro: {ex.Message}";
            Debug.WriteLine($"Erro: {ex.Message}");
            await InvokeAsync(StateHasChanged);
        }
        finally
        {
            ToggleBody(false);
            await InvokeAsync(StateHasChanged); // Oculta o loader
        }
        isValid(true);
    }

    private async void SaveNetworkInfo()
    {
        ToggleBody(true);
        CallJavaScriptAfterRender();
        statusAlert = null;
        statusError = null;
        statusSuccess = null;
        statusInfo = null;

        if (string.IsNullOrEmpty(ssid) || string.IsNullOrEmpty(gateway) || string.IsNullOrEmpty(availableIP) || string.IsNullOrEmpty(subnetMask) || string.IsNullOrEmpty(password))
        {
            statusAlert = "Preencha todos os campos";
            StateHasChanged();
            await CallJavaScriptAfterRender();
        }
        else
        {

            bool isConnected = await NetworkService.ConnectToWifiAsync(ssid, password);

            if (isConnected)
            {
                Debug.WriteLine("Conexão Wi-Fi bem-sucedida!");
                NetworkService.DisconnectFromWifi();
            }
            else
            {
                Debug.WriteLine("Verifique se a senha do Wi-Fi está correta ou se o nome do Wi-Fi está correto.");
                statusError = "Verifique se a senha do Wi-Fi está correta ou se o nome do Wi-Fi está correto.";
                StateHasChanged();
                await CallJavaScriptAfterRender();
                return;
            }

            cidr = ConvertSubnetMaskToCIDR(subnetMask);
            // Salvando no SQLite
            using var db = new SQLiteConnection(FileUploadService.pathDB());

            var table = db.Table<NetworkInfo>().FirstOrDefault(c => c.Id == "$");
            if (table is null)
            {
                var networkInfo = new NetworkInfo
                    {
                        Id = "$",
                        SSID = ssid,
                        Gateway = gateway,
                        LocalIP = localIP,
                        Password = password,
                        AvailableIP = availableIP,
                        SubnetMask = subnetMask,
                        CIDR = cidr
                    };

                db.Insert(networkInfo);
            }
            else
            {
                table.SSID = ssid;
                table.Gateway = gateway;
                table.LocalIP = localIP;
                table.AvailableIP = availableIP;
                table.Password = password;
                table.SubnetMask = subnetMask;
                table.CIDR = cidr;
                db.Update(table);
            }

            statusSuccess = "Informações de rede salvas.";
            CallJavaScriptAfterRender();
            StateHasChanged();
            Debug.WriteLine("Informações de rede salvas.");
        }
    }

    private async Task SetActiveMenu(string menuId)
    {
        // Chama a função JavaScript passando o ID do menu ativo
        await JSRuntime.InvokeVoidAsync("setActiveClass", menuId);
    }

}