@page "/Wi-FiConfig"
@using CuoraConnect.Services
@using System.Diagnostics;
@using CuoraConnect.Models;
@using SQLite
@using System.ComponentModel
@inject INetworkService NetworkService
@inject IFileUploadService FileUploadService
@inject IJSRuntime JSRuntime




<script>

    function scrollToElement() {
        // Rola até o final da página
        window.scrollTo({
            top: document.body.scrollHeight, // Altura total do corpo da página
            behavior: 'smooth' // Rolagem suave
        });
    }
    const passwordInput = document.getElementById('pwd');
    const togglePasswordButton = document.getElementById('togglePassword');
    const icon = togglePasswordButton.querySelector('i');

    togglePasswordButton.addEventListener('click', () => {
        // Alterna entre 'password' e 'text'
        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordInput.setAttribute('type', type);

        // Alterna o ícone entre olho aberto e fechado
        icon.classList.toggle('bi-eye');
        icon.classList.toggle('bi-eye-slash');
    });
</script>





<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">


<ol style="--length: 5;">
    <li id="pop-up" style="--i: 3; counter-reset: list 2;">

        <div class="href-target" id="icons"></div>
        <h3>
            Informações da rede Wi-Fi do seu Comércio
        </h3>
<form action="/action_page.php" class="was-validated">
    <div class="nice-form-group">
        <label for="ssidInput" class="form-label">Sua Rede (SSID):</label>
        <input type="text"  id="ssidInput" placeholder="Wi-Fi do seu comércio" @bind="ssid" pattern=".*\S+.*" required>
        <div class="valid-feedback"></div>
        <div class="invalid-feedback">Por favor, preencha o nome da rede (SSID).</div>
    </div>
    <!--
             <div class="nice-form-group">
                 <label for="pwd" class="form-label">Senha do Wi-Fi:</label>
                 <div class="input-group">
                     <input type="@PasswordInputType" class="form-control" id="pwd" placeholder="Senha do Wi-Fi do seu comércio" @bind="password" minlength="8" required>
                     <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                         <i class="@PasswordIconClass"></i>
                     </button>
                 </div>
                 <div class="valid-feedback"></div>
                 <div class="invalid-feedback">Por favor, preencha o campo de senha com pelo menos 8 caracteres.</div>
             </div>
                     -->
            <div  class="nice-form-group" style="/* display: flex; *//* align-items: center; */">
                <label for="pwd" class="form-label">Senha do Wi-Fi:</label>
                <input type="@PasswordInputType" class="" id="pwd" placeholder="Senha do Wi-Fi do seu comércio" @bind="password" minlength="8" required="">
                <button type="button" style="background-color: transparent;border: transparent;width: 50px;height: 44px;right: 4%;position: absolute;" @onclick="TogglePasswordVisibility"><i class="@PasswordIconClass"></i></button>
                <div class="valid-feedback" ></div>
               <div class="invalid-feedback" >Por favor, preencha o campo de senha com pelo menos 8 caracteres.</div>
            </div>


    <div class="nice-form-group">
        <label for="gatewayInput" class="form-label">Gateway Padrão:</label>
        <input type="text"  id="gatewayInput" placeholder="Ex: 192.168.0.1" @bind="gateway" pattern="^([0-9]{1,3}\.){3}[0-9]{1,3}$" required>
        <div class="valid-feedback"></div>
        <div class="invalid-feedback">Por favor, insira um IP válido (formato: 192.168.0.1).</div>
    </div>

    <div class="nice-form-group">
        <label for="subnetMask" class="form-label">Máscara de Rede:</label>
        <input type="text"  id="subnetMask" placeholder="Ex: 255.255.255.0" @bind="subnetMask" pattern="^([0-9]{1,3}\.){3}[0-9]{1,3}$" required>
        <div class="valid-feedback"></div>
        <div class="invalid-feedback">Por favor, insira uma máscara de rede válida (formato: 255.255.255.0).</div>
    </div>

    <div class="nice-form-group">
        <label for="availableIPInput" class="form-label">IP Disponível:</label>
        <input type="text"  id="availableIPInput" placeholder="Ex: 192.168.0.10" @bind="availableIP" pattern="^([0-9]{1,3}\.){3}[0-9]{1,3}$" required>
        <div class="valid-feedback"></div>
        <div class="invalid-feedback">Por favor, insira um IP válido (formato: 192.168.0.10).</div>
    </div>


    <a class="btn btn-primary mt-2" @onclick="GetNetworkInfo">Obter Informações da Rede</a>
    <a class="btn btn-success mt-2" @onclick="() => SaveNetworkInfo()">Salvar Alterações</a>
</form>
    </li>
</ol>


<!--
<ol style="--length: 5;">
    <li id="pop-up" style="--i: 3; counter-reset: list 2;">

        <div class="href-target" id="icons"></div>
        <h3>
           Informações da rede Wi-Fi do seu Comércio
        </h3>
        <div class="nice-form-group">
            <label>Sua Rede</label>
            <input type="url" placeholder="Wi-Fi do seu comércio" id="ssidInput" @bind="ssid" class="icon-right" />
        </div>
        <div class="nice-form-group">
            <label>Senha do Wi-Fi</label>
            <input type="password" placeholder="Senha do Wi-Fi do seu comércio" @bind="password" class="icon-right" />
        </div>
        <div class="nice-form-group">
            <label>Gateway Padrão</label>
            <input type="url" placeholder="IP do seu Roteador" id="gatewayInput" @bind="gateway" class="icon-right" />
        </div>
        <div class="nice-form-group">
            <label>Máscara de Rede</label>
            <input type="url" placeholder="IP do seu Roteador" @bind="subnetMask" class="icon-right" />
        </div>
        <div class="nice-form-group">
            <label>IP Disponível</label>
            <input type="email" placeholder="IP disponível em seu Wi-Fi" id="availableIPInput" @bind="availableIP" class="icon-right" />
        </div>

        <a class="btn btn-primary mt-2" @onclick="GetNetworkInfo">Obter Informações da Rede</a>
        <a class="btn btn-success mt-2" @onclick="() => SaveNetworkInfo()">Salvar Alterações</a>

    </li>
</ol>
-->
@if (!string.IsNullOrEmpty(statusAlert) || !string.IsNullOrEmpty(statusSuccess) || !string.IsNullOrEmpty(statusInfo) || statusError != null || loader == true){
<div id="container" class="container ">

    <div class="text-center">
        <h4 class="fw-bold">Status de conexão </h4>
    </div>
        
     @if (statusSuccess != null)
        {
            loader
            = false;
            <!-- Success Alert -->
    <div class="alert alert-success d-flex justify-content-between align-items-center" role="alert">
        <div class="d-flex align-items-center">
            <svg width="30px" height="30px" viewBox="0 0 48 48" version="1" xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 48 48">
                <circle fill="#0f5132" cx="24" cy="24" r="21" />
                <polygon fill="#d1e7dd" points="34.6,14.6 21,28.2 15.4,22.6 12.6,25.4 21,33.8 37.4,17.4" />
            </svg>
            <div class="mx-3">Sucesso - @statusSuccess</div>
        </div>
            <a href="sendfile" class="btn btn-outline-success btn-sm" @onclick="@(() => SetActiveMenu("sendfile"))">Avançar</a>
                
    </div>
        }


        @if (statusInfo != null)
        {
            loader
    = false;
    <!-- Info Alert -->
    <div class="alert alert-info d-flex justify-content-between align-items-center" role="alert">
        <div class="d-flex align-items-center">
            <svg width="30px" height="30px" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" version="1.1" fill="#CFF4FC" stroke="#055160" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5">
                <circle cy="8" cx="8" r="6.25" />
                <path d="m8 5.25v0m0 6v-3.5" />
            </svg>

            <div  class="mx-3">Informação - @statusInfo</div>
        </div>
        <a  class="btn btn-outline-info btn-sm">Avançar</a>
                
    </div>
    }

    @if (statusAlert != null)
        {
            loader
        = false;
    <!-- Warning Alert -->
    <div class="alert alert-warning d-flex justify-content-between align-items-center" role="alert">
        <div class="d-flex align-items-center">
            <svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="25" height="25" viewBox="0 0 310.806 310.806" style="enable-background:new 0 0 310.806 310.806;" xml:space="preserve">
<path d="M305.095,229.104L186.055,42.579c-6.713-10.52-18.172-16.801-30.652-16.801c-12.481,0-23.94,6.281-30.651,16.801
	L5.711,229.103c-7.145,11.197-7.619,25.39-1.233,37.042c6.386,11.647,18.604,18.883,31.886,18.883h238.079
	c13.282,0,25.5-7.235,31.888-18.886C312.714,254.493,312.24,240.301,305.095,229.104z M155.403,253.631
	c-10.947,0-19.82-8.874-19.82-19.82c0-10.947,8.874-19.821,19.82-19.821c10.947,0,19.82,8.874,19.82,19.821
	C175.223,244.757,166.349,253.631,155.403,253.631z M182.875,115.9l-9.762,65.727c-1.437,9.675-10.445,16.353-20.119,14.916
	c-7.816-1.161-13.676-7.289-14.881-14.692l-10.601-65.597c-2.468-15.273,7.912-29.655,23.185-32.123
	c15.273-2.468,29.655,7.912,32.123,23.185C183.284,110.192,183.268,113.161,182.875,115.9z" fill="#664d03"></path>
</svg>
            <div  class="mx-3">Atênção - @statusAlert</div>
        </div>
                <a class="btn btn-outline-warning btn-sm" @onclick="@(() => aHide("statusAlertHide"))">Entendido</a>
                
    </div>
    }

    @if(statusError != null){
            loader
 = false;
    <!-- Error Alert -->
    <div class="alert alert-danger d-flex justify-content-between align-items-center" role="alert">
        <div class="d-flex align-items-center">

            <svg width="30" height="30" viewBox="0 0 290 290" fill="none" xmlns="http://www.w3.org/2000/svg">
                <ellipse cx="145" cy="145" rx="101" ry="97" fill="#F8D7DA" />
                <path d="M135.937 24.1855C98.2715 27.0176 64.0605 47.3516 43.0469 79.2969C20.4473 113.734 17.6719 160.35 35.9668 197.959C41.9707 210.307 48.2578 219.256 58.0566 229.338C70.8008 242.422 84.3379 251.484 100.934 257.998C114.98 263.436 128.234 265.871 144.717 265.871C159.5 265.871 170.035 264.342 182.553 260.264C221.918 247.52 252.277 214.951 262.529 174.453C266.041 160.633 267.004 141.262 264.908 127.441C260.83 100.934 248.029 76.0117 228.998 57.7734C203.963 33.7012 170.375 21.5801 135.937 24.1855ZM158.594 49.5039C187.084 53.2988 212.289 69.2715 226.449 92.4375C236.135 108.24 240.496 122.797 241.119 141.375C241.855 162.785 236.814 181.477 225.6 198.809C212.912 218.293 193.088 232.453 170.205 238.23C146.643 244.234 121.437 241.516 100.254 230.754C90.8515 225.939 83.7148 220.785 76.4648 213.535C69.2148 206.285 64.0605 199.148 59.2461 189.746C51.4863 174.453 48.2578 159.387 48.8808 141.375C49.5605 122.117 54.3183 106.824 64.457 91.1914C73.8594 76.748 85.4707 66.4961 101.67 58.5098C110.109 54.3184 120.191 51.1465 129.141 49.9004C131.463 49.5605 134.012 49.1641 134.805 49.0508C138.486 48.541 153.27 48.8242 158.594 49.5039Z" fill="#842029" />
                <path d="M104.502 97.1387C100.141 98.668 96.2891 104.162 96.2891 108.75C96.2891 113.281 96.9688 114.131 112.602 129.82L127.725 145L112.602 160.123C96.9688 175.869 96.2891 176.719 96.2891 181.25C96.2891 187.594 102.406 193.711 108.75 193.711C113.281 193.711 114.131 193.031 129.877 177.398L145 162.275L160.18 177.398C175.869 193.031 176.719 193.711 181.25 193.711C187.594 193.711 193.711 187.594 193.711 181.25C193.711 176.719 193.031 175.869 177.398 160.123L162.275 145L177.398 129.82C193.031 114.131 193.711 113.281 193.711 108.75C193.711 102.406 187.594 96.2891 181.25 96.2891C176.719 96.2891 175.869 96.9687 160.18 112.602L145 127.725L129.877 112.602C117.246 100.084 114.301 97.4219 112.432 96.9121C109.43 96.1191 107.277 96.1758 104.502 97.1387Z" fill="#842029" />
            </svg>

            <div class="mx-3">Erro - @statusError</div>
        </div>
        <a  class="btn btn-outline-danger btn-sm" @onclick="@(() => aHide("statusErrorHide"))">Entendido</a>
        
                

    </div>
    }
        @if (loader == true)
        {

        <div id="wifi-loader" >
            <svg class="circle-outer" viewBox="0 0 86 86">
                <circle class="back" cx="43" cy="43" r="40"></circle>
                <circle class="front" cx="43" cy="43" r="40"></circle>
                <circle class="new" cx="43" cy="43" r="40"></circle>
            </svg>
            <svg class="circle-middle" viewBox="0 0 60 60">
                <circle class="back" cx="30" cy="30" r="27"></circle>
                <circle class="front" cx="30" cy="30" r="27"></circle>
            </svg>
            <svg class="circle-inner" viewBox="0 0 34 34">
                <circle class="back" cx="17" cy="17" r="14"></circle>
                <circle class="front" cx="17" cy="17" r="14"></circle>
            </svg>
            <div class="text" data-text="Carregando"></div>
        </div>
        }
</div>
}






@code {
    private string? statusSuccess;
    private string? statusAlert;
    private string? statusError;
    private string? statusInfo;
    private bool loader;
    private string ssid = "";
    private string gateway = "";
    private string localIP = "";
    private string availableIP = "";
    private string password = "";
    private string subnetMask = "";
    private int cidr;
    private List<string> networks = new List<string>();

    private string dbPath;


    // Inicializa o caminho do banco de dados e cria a tabela
    protected override void OnInitialized()
    {

        string dbPath = FileUploadService.pathDB();

        using var db = new SQLiteConnection(dbPath);
        db.CreateTable<NetworkInfo>();
      
        
    }



    protected override async Task OnInitializedAsync()
{
   await GetNetworkInfo();
}


    // Variável para controlar a visibilidade da senha
    private bool isPasswordVisible = false;

    // Propriedade para o tipo do input
    private string PasswordInputType => isPasswordVisible ? "text" : "password";

    // Propriedade para o ícone
    private string PasswordIconClass => isPasswordVisible ? "bi bi-eye-slash" : "bi bi-eye";

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    private async Task CallJavaScriptAfterRender()
    {
        // Aguarda até a próxima renderização do componente
        await Task.Yield(); // Isso força a execução do código a continuar após a renderização
        await JSRuntime.InvokeVoidAsync("scrollToElement");
    }


    private Task aHide(string status)
    {
        if (status == "statusAlertHide")
        {
            statusAlert = null;
        }
        else if (status == "statusErrorHide")
        {
            statusError = null;
        }
        else if (status == "statusSuccessHide")
        {
            statusSuccess = null;
        }
        else if (status == "statusInfoHide")
        {
            statusInfo = null;
        }
        return Task.CompletedTask;
    }


    private string CleanStatus()
    {
        statusAlert = null;
        statusError = null;
        statusSuccess = null;
        statusInfo = null;
        return "";
    }


    private string CleanInputs()
    {
        gateway = "";
        localIP = "";
        availableIP = "";
        password = "";
        subnetMask = "";
        return "";
    }
    public int ConvertSubnetMaskToCIDR(string subnetMask)
    {

        // Divide a máscara em octetos
        string[] parts = subnetMask.Split('.');
        int cidr = 0;

        foreach (var part in parts)
        {
            // Converte cada octeto para um inteiro
            byte octet = byte.Parse(part);
            // Conta o número de bits `1` no octeto
            cidr += CountBits(octet);
        }
        Debug.WriteLine($"SubNetMask: {subnetMask}");
        Debug.WriteLine($"CIDR: {cidr}");
        return cidr;

    }



    private int CountBits(byte octet)
    {
        int count = 0;
        while (octet > 0)
        {
            count += octet & 1; // Incrementa se o bit menos significativo for `1`
            octet >>= 1; // Desloca o bit para a direita
        }
        return count;
    }

    private async Task GetNetworkInfo()
    {
        loader = true;
        CallJavaScriptAfterRender();
        CleanStatus();
        CleanInputs();

        Debug.WriteLine("Tentando obter informações da rede...");
        try
        {
            ssid = await NetworkService.GetCurrentSSID();
            Debug.WriteLine($"SSID: {ssid}");

            if (ssid.StartsWith("CUORA_MAX"))
            {
                statusError = "Desconecte da rede Cuora Max e conecte na rede do seu estabelecimento";
                await CallJavaScriptAfterRender();
            }


            bool isMobileDataEnabled = NetworkService.IsMobileDataEnabled();
            if (isMobileDataEnabled)
            {
                Debug.WriteLine("Dados móveis estão ativados.");
                statusError = "Desative sua conexão com os dados móveis.";
                await CallJavaScriptAfterRender();
                return;
            }
            else
            {
                Debug.WriteLine("Dados móveis estão desativados.");
            }

            bool connected5g = await NetworkService.IsConnectedTo5G();
            if (connected5g == true)
            {
                Debug.WriteLine("Conectado no 5g");
                statusError = "Não é possível configurar em redes Wi-Fi 5g, conecte em uma rede Wi-Fi 2.4g";
                CallJavaScriptAfterRender();

                return;
            }
            else
            {
                Debug.WriteLine("Conexão 2.4g");
            }







            Debug.WriteLine("Serviço de rede obtido.");

            // Obtém o SSID
            ssid = await NetworkService.GetCurrentSSID();
            if (ssid == "")
            {
                statusError = "Nenhuma conexão Wi-Fi ativa, conecte no Wi-Fi do seu estabelecimento.";
                StateHasChanged();
                await CallJavaScriptAfterRender();
            }
            Debug.WriteLine($"SSID: {ssid}");

            // Obtém o Gateway Padrão
            gateway = NetworkService.GetDefaultGateway();
            Debug.WriteLine($"Gateway Padrão: {gateway}");

            // Obtém o IP Local
            localIP = NetworkService.GetLocalIPAddress();
            Debug.WriteLine($"IP Local: {localIP}");

            // Obtém o IP disponível
            availableIP = NetworkService.GetAvailableIPAddress();
            Debug.WriteLine($"IP Disponível: {availableIP}");

            subnetMask = NetworkService.GetSubnetMask();

            Debug.WriteLine($"Máscara disponível: {subnetMask}");

            loader = false;
        }
        catch (Exception ex)
        {
            ssid = $"Erro: {ex.Message}";
            Debug.WriteLine($"Erro: {ex.Message}");
        }
    }

    private async void SaveNetworkInfo()
    {
        loader = true;
        CallJavaScriptAfterRender();
        statusAlert = null;
        statusError = null;
        statusSuccess = null;
        statusInfo = null;

        if (string.IsNullOrEmpty(ssid) || string.IsNullOrEmpty(gateway) || string.IsNullOrEmpty(localIP) || string.IsNullOrEmpty(availableIP) || string.IsNullOrEmpty(subnetMask) || string.IsNullOrEmpty(password))
        {
            statusAlert = "Preencha todos os campos";
            StateHasChanged();
            await CallJavaScriptAfterRender();
        }
        else{

            bool isConnected = await NetworkService.ConnectToWifiAsync(ssid, password);

            if (isConnected)
            {
                Debug.WriteLine("Conexão Wi-Fi bem-sucedida!");
                 NetworkService.DisconnectFromWifi();
            }
            else
            {
                Debug.WriteLine("Verifique se a senha do Wi-Fi está correta.");
                statusError = "Verifique se a senha do Wi-Fi está correta.";
                StateHasChanged();
                await CallJavaScriptAfterRender();
                return;
            }

        cidr = ConvertSubnetMaskToCIDR(subnetMask);
        // Salvando no SQLite
        using var db = new SQLiteConnection(FileUploadService.pathDB());

        var table = db.Table<NetworkInfo>().FirstOrDefault(c => c.Id == "$");
        if(table is null)
        {
            var networkInfo = new NetworkInfo
                {
                    Id = "$",
                    SSID = ssid,
                    Gateway = gateway,
                    LocalIP = localIP,
                    Password = password,
                    AvailableIP = availableIP,
                    SubnetMask = subnetMask,
                    CIDR = cidr
                };

            db.Insert(networkInfo);
        }
        else
        {
            table.SSID = ssid;
            table.Gateway = gateway;
            table.LocalIP = localIP;
            table.AvailableIP = availableIP;
            table.Password = password;
            table.SubnetMask = subnetMask;
            table.CIDR = cidr;
            db.Update(table);
        }
        
        statusSuccess = "Informações de rede salvas no banco de dados.";
            CallJavaScriptAfterRender();
            StateHasChanged();
        Debug.WriteLine("Informações de rede salvas no banco de dados.");
        }
    }

    private async Task SetActiveMenu(string menuId)
    {
        // Chama a função JavaScript passando o ID do menu ativo
        await JSRuntime.InvokeVoidAsync("setActiveClass", menuId);
    }
}
