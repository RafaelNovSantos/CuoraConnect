@page "/counter"
@using CuoraConnect.Services
@using System.Diagnostics;
@inject INetworkService NetworkService
@inject IJSRuntime JS

<h3>Informações da Rede</h3>

<div class="container">
    <div class="form-group">
        <label for="ssidInput">SSID</label>
        <input type="text" class="form-control" id="ssidInput" @bind="ssid" />
    </div>

    <div class="form-group">
        <label for="gatewayInput">Gateway Padrão</label>
        <input type="text" class="form-control" id="gatewayInput" @bind="gateway" />
    </div>

    <div class="form-group">
        <label for="localIPInput">IP Local</label>
        <input type="text" class="form-control mt-01" id="localIPInput" @bind="localIP" />
    </div>

    <div class="form-group">
        <label for="availableIPInput">IP Disponível</label>
        <input type="text" class="form-control mt-01" id="availableIPInput" @bind="availableIP" />
    </div>

    <div class="form-group">
        <label>Redes Wi-Fi disponíveis</label>
        <ul class="list-group">
            @foreach (var Ssid in networks)
            {
                <li class="list-group-item">@Ssid</li>
            }
        </ul>
    </div>

    <button class="btn btn-primary mb-2" @onclick="GetNetworkInfo">Obter Informações da Rede</button>
    <button class="btn btn-success mb-2" @onclick="SaveNetworkInfo">Salvar Alterações</button>
</div>

@code {
    private string ssid = "SSID";
    private string gateway = "Gateway Padrão";
    private string localIP = "IP Local";
    private string availableIP = "IP Disponível";
    private List<string> networks = new List<string>();

    private async Task GetNetworkInfo()
    {
        Debug.WriteLine("Tentando obter informações da rede...");
        try
        {
            Debug.WriteLine("Serviço de rede obtido.");

            // Obtém o SSID
            ssid = await NetworkService.GetCurrentSSID();
            Debug.WriteLine($"SSID: {ssid}");

            // Obtém o Gateway Padrão
            gateway = NetworkService.GetDefaultGateway();
            Debug.WriteLine($"Gateway Padrão: {gateway}");

            // Obtém o IP Local
            localIP = NetworkService.GetLocalIPAddress();
            Debug.WriteLine($"IP Local: {localIP}");

            // Obtém o IP disponível
            availableIP = NetworkService.GetAvailableIPAddress();
            Debug.WriteLine($"IP Disponível: {availableIP}");

            // Obtém redes Wi-Fi disponíveis
            networks = NetworkService.GetAvailableWifiNetworks();
            Debug.WriteLine($"Redes Wi-Fi disponíveis: {string.Join(", ", networks)}");
        }
        catch (Exception ex)
        {
            ssid = $"Erro: {ex.Message}";
            Debug.WriteLine($"Erro: {ex.Message}");
        }
    }

    private void SaveNetworkInfo()
    {
        Debug.WriteLine("Salvando alterações...");
        // Aqui você pode implementar a lógica para salvar as alterações
        Debug.WriteLine($"Novo SSID: {ssid}");
        Debug.WriteLine($"Novo Gateway: {gateway}");
        Debug.WriteLine($"Novo IP Local: {localIP}");
        Debug.WriteLine($"Novo IP Disponível: {availableIP}");

        // Supondo que você tenha um método para atualizar as configurações
        // NetworkService.UpdateNetworkSettings(ssid, gateway, localIP, availableIP);
    }
}